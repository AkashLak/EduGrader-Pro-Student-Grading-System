
import java.awt.Color;
import java.io.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author akash
 */
public class frmAddModDel extends javax.swing.JFrame {

    /**
     * Creates new form frmAddModDel
     */
    
    //String variables declared to store the FilePath for the input file "StudentMaintenance.txt" and temporary file name "temp.txt"
    String filepath = "StudentMaintenance.txt";
    String tempFile = "temp.txt";
    
    //creating file definition of the input file StudentMaintenance.txt
    File oldFile = new File(filepath);
    
    //char variable defined to store the User Action for Add/Delete/Modify student record
    char User_Command;
    
    // String variables declared to store the Full Student Name (combining First and Last Name) and Success Message for display
    String Student_Name;
    String Success_Msg;
    
    //integer variables declared to store the Student Roll No and all 4 Subject Marks
    int Student_Count = 0;
    int StudRollNo;
    int Subj1Marks = 0;
    int Subj2Marks = 0;
    int Subj3Marks = 0;
    int Subj4Marks = 0;
    
    //integer variables declared to store the integer value from marks, Searchfindinded and roll no
    int Validate_Integer = 0;
    int StudRollNo_Array_NextStorage = 0;
    int SearchFindIndex = 0;
    int NextRollNo = 0;
      
    //boolean variables declared to store the validity flag for all fields and for all checks of existence of student record
    boolean Validate_Int_flag = false;
    boolean StudRollNo_flag = false;
    boolean StudSubj1_flag = false;
    boolean StudSubj2_flag = false;
    boolean StudSubj3_flag = false;
    boolean StudSubj4_flag = false;
    boolean Commit_flag = false;
    boolean Name_Exists_flag = false;
    boolean Search_flag = false;
    boolean StudFirstName_flag = false;
    boolean StudLastName_flag = false;
    boolean Roll_Exists_flag = false;
    boolean StudRoll_flag = false;
    boolean Perform_Search = false;
    boolean InputFile_Validity_Flag = false;
    
    public classAkashISU Stud_data;
    
    public frmAddModDel(classAkashISU Stud_data) {
        initComponents();
        
        this.Stud_data = Stud_data;
        
        //Calling InputFileRead_to_ParallelArray routine to read data from the Input file and store in the Parallel Arrays      
        InputFileRead_to_ParallelArray();
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMainTitle = new javax.swing.JLabel();
        lblSubTitle1 = new javax.swing.JLabel();
        lblSubTitle2 = new javax.swing.JLabel();
        lblGoodRespMsg = new javax.swing.JLabel();
        btnGotoStatistics = new javax.swing.JButton();
        btnGotoMainMenu = new javax.swing.JButton();
        lblBadRespMsg = new javax.swing.JLabel();
        lblLine1 = new javax.swing.JLabel();
        jPanelStudMaintenance = new javax.swing.JPanel();
        lblSubMenu = new javax.swing.JLabel();
        lblOperationProg = new javax.swing.JLabel();
        lblMenuOption = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblErrStudRollNo = new javax.swing.JLabel();
        lblErrStudFirstName = new javax.swing.JLabel();
        lblErrStudSubj1 = new javax.swing.JLabel();
        lblErrStudSubj2 = new javax.swing.JLabel();
        lblErrStudSubj3 = new javax.swing.JLabel();
        lblErrStudSubj4 = new javax.swing.JLabel();
        btnCommit = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        lblStudRollNo = new javax.swing.JLabel();
        lblStudFirstName = new javax.swing.JLabel();
        lblStudSubj1 = new javax.swing.JLabel();
        lblStudSubj2 = new javax.swing.JLabel();
        lblErrStudLastName = new javax.swing.JLabel();
        lblStudSubj3 = new javax.swing.JLabel();
        lblStudLastName = new javax.swing.JLabel();
        lblStudSubj4 = new javax.swing.JLabel();
        txtStudLastName = new javax.swing.JTextField();
        txtStudRollNo = new javax.swing.JTextField();
        txtStudFirstName = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        txtStudSubj1 = new javax.swing.JTextField();
        txtStudSubj2 = new javax.swing.JTextField();
        txtStudSubj3 = new javax.swing.JTextField();
        txtStudSubj4 = new javax.swing.JTextField();
        lbldummy = new javax.swing.JLabel();
        lblOR1 = new javax.swing.JLabel();
        lblOR2 = new javax.swing.JLabel();
        btnQuitProgram = new javax.swing.JButton();
        lblStudCountLabel = new javax.swing.JLabel();
        lblStudCount = new javax.swing.JLabel();
        lblSubTitle4 = new javax.swing.JLabel();
        lblSubTitle5 = new javax.swing.JLabel();
        lblSubTitle6 = new javax.swing.JLabel();
        lblSubTitle7 = new javax.swing.JLabel();
        lblSubTitle8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblMainTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMainTitle.setForeground(new java.awt.Color(255, 0, 0));
        lblMainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMainTitle.setText("STUDENT MARKS - MAINTENANCE & REPORTING");

        lblSubTitle1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSubTitle1.setForeground(new java.awt.Color(51, 0, 51));
        lblSubTitle1.setText("Instructions :");

        lblSubTitle2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle2.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle2.setText("1.  This tool is meant for School Teachers, to maintain the student records by adding/updating marks throughout the year");

        lblGoodRespMsg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblGoodRespMsg.setForeground(new java.awt.Color(51, 153, 0));
        lblGoodRespMsg.setText("Good Response Message");

        btnGotoStatistics.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGotoStatistics.setForeground(new java.awt.Color(255, 0, 0));
        btnGotoStatistics.setText("GOTO STATISTICS PAGE");
        btnGotoStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGotoStatisticsActionPerformed(evt);
            }
        });

        btnGotoMainMenu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGotoMainMenu.setForeground(new java.awt.Color(255, 0, 0));
        btnGotoMainMenu.setText("GOTO MAIN MENU");
        btnGotoMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGotoMainMenuActionPerformed(evt);
            }
        });

        lblBadRespMsg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblBadRespMsg.setForeground(new java.awt.Color(255, 0, 51));
        lblBadRespMsg.setText("Bad Response Message");

        lblLine1.setForeground(new java.awt.Color(51, 51, 0));
        lblLine1.setText("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

        jPanelStudMaintenance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblSubMenu.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblSubMenu.setForeground(new java.awt.Color(0, 51, 51));
        lblSubMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSubMenu.setText("(Pick One)");

        lblOperationProg.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblOperationProg.setForeground(new java.awt.Color(0, 0, 204));
        lblOperationProg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOperationProg.setText("jLabel1");

        lblMenuOption.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblMenuOption.setForeground(new java.awt.Color(0, 0, 255));
        lblMenuOption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMenuOption.setText("STUDENT RECORD MAINTENANCE");

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(51, 0, 0));
        btnAdd.setText("ADD STUDENT RECORD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnModify.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnModify.setForeground(new java.awt.Color(51, 0, 0));
        btnModify.setText("MODIFY STUDENT RECORD");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(51, 0, 0));
        btnDelete.setText("DELETE STUDENT RECORD");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblErrStudRollNo.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudRollNo.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudRollNo.setText("Error Message 1");

        lblErrStudFirstName.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudFirstName.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudFirstName.setText("Error Message 3");

        lblErrStudSubj1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudSubj1.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudSubj1.setText("Error Message 4");

        lblErrStudSubj2.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudSubj2.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudSubj2.setText("Error Message 5");

        lblErrStudSubj3.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudSubj3.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudSubj3.setText("Error Message 6");

        lblErrStudSubj4.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudSubj4.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudSubj4.setText("Error Message 7");

        btnCommit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCommit.setForeground(new java.awt.Color(0, 51, 51));
        btnCommit.setText("COMMIT");
        btnCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(0, 51, 51));
        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblStudRollNo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudRollNo.setForeground(new java.awt.Color(153, 0, 51));
        lblStudRollNo.setText("STUDENT ROLL NO");

        lblStudFirstName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudFirstName.setForeground(new java.awt.Color(153, 0, 51));
        lblStudFirstName.setText("STUDENT FIRST NAME");

        lblStudSubj1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudSubj1.setForeground(new java.awt.Color(153, 0, 51));
        lblStudSubj1.setText("MATHEMATICS MARKS");

        lblStudSubj2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudSubj2.setForeground(new java.awt.Color(153, 0, 51));
        lblStudSubj2.setText("COMP. SCIENCE MARKS");

        lblErrStudLastName.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblErrStudLastName.setForeground(new java.awt.Color(255, 0, 0));
        lblErrStudLastName.setText("Error Message 2");

        lblStudSubj3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudSubj3.setForeground(new java.awt.Color(153, 0, 51));
        lblStudSubj3.setText("BIOLOGY MARKS");

        lblStudLastName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudLastName.setForeground(new java.awt.Color(153, 0, 51));
        lblStudLastName.setText("STUDENT LAST NAME");

        lblStudSubj4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStudSubj4.setForeground(new java.awt.Color(153, 0, 51));
        lblStudSubj4.setText("CHEMISTRY MARKS");

        txtStudLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudLastNameKeyReleased(evt);
            }
        });

        txtStudRollNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudRollNoKeyReleased(evt);
            }
        });

        txtStudFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudFirstNameKeyReleased(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(0, 51, 51));
        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtStudSubj1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudSubj1KeyReleased(evt);
            }
        });

        txtStudSubj2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudSubj2KeyReleased(evt);
            }
        });

        txtStudSubj3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudSubj3KeyReleased(evt);
            }
        });

        txtStudSubj4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudSubj4KeyReleased(evt);
            }
        });

        lbldummy.setText(" ");

        lblOR1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblOR1.setForeground(new java.awt.Color(51, 0, 51));
        lblOR1.setText("OR");

        lblOR2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblOR2.setForeground(new java.awt.Color(51, 0, 51));
        lblOR2.setText("OR");

        javax.swing.GroupLayout jPanelStudMaintenanceLayout = new javax.swing.GroupLayout(jPanelStudMaintenance);
        jPanelStudMaintenance.setLayout(jPanelStudMaintenanceLayout);
        jPanelStudMaintenanceLayout.setHorizontalGroup(
            jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudMaintenanceLayout.createSequentialGroup()
                        .addContainerGap(59, Short.MAX_VALUE)
                        .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(lblMenuOption)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbldummy))
                            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                                .addComponent(btnDelete)
                                .addGap(143, 143, 143))
                            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addComponent(btnSearch)
                                        .addGap(97, 97, 97)
                                        .addComponent(btnCommit)
                                        .addGap(60, 60, 60)
                                        .addComponent(btnCancel))
                                    .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                        .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(lblStudRollNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblStudFirstName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblStudSubj1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblStudSubj2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblStudSubj3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblStudSubj4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblStudLastName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(67, 67, 67)
                                        .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(lblOR2))
                                            .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudMaintenanceLayout.createSequentialGroup()
                                                    .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtStudFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtStudSubj1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtStudSubj2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtStudSubj3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtStudSubj4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(44, 44, 44)
                                                    .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblErrStudFirstName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblErrStudSubj1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblErrStudSubj2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblErrStudSubj3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblErrStudSubj4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudMaintenanceLayout.createSequentialGroup()
                                                    .addComponent(txtStudRollNo, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrStudRollNo, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                                    .addComponent(txtStudLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblErrStudLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(lblSubMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudMaintenanceLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblOperationProg, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                        .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(btnModify))
                            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addComponent(lblOR1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelStudMaintenanceLayout.setVerticalGroup(
            jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblMenuOption))
                    .addGroup(jPanelStudMaintenanceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbldummy)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubMenu)
                .addGap(16, 16, 16)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(btnModify)
                .addGap(28, 28, 28)
                .addComponent(lblOperationProg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudRollNo)
                    .addComponent(txtStudRollNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudRollNo))
                .addGap(12, 12, 12)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOR1)
                    .addComponent(lblOR2))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudLastName)
                    .addComponent(txtStudLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudLastName))
                .addGap(27, 27, 27)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudFirstName)
                    .addComponent(txtStudFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudFirstName))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudSubj1)
                    .addComponent(txtStudSubj1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudSubj1))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudSubj2)
                    .addComponent(txtStudSubj2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudSubj2))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudSubj3)
                    .addComponent(txtStudSubj3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudSubj3))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudSubj4)
                    .addComponent(txtStudSubj4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrStudSubj4))
                .addGap(28, 28, 28)
                .addGroup(jPanelStudMaintenanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCommit)
                    .addComponent(btnSearch)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        btnQuitProgram.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnQuitProgram.setForeground(new java.awt.Color(255, 0, 0));
        btnQuitProgram.setText("QUIT PROGRAM");
        btnQuitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitProgramActionPerformed(evt);
            }
        });

        lblStudCountLabel.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblStudCountLabel.setForeground(new java.awt.Color(102, 0, 102));
        lblStudCountLabel.setText("Student Count  :");

        lblStudCount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblStudCount.setForeground(new java.awt.Color(0, 102, 102));
        lblStudCount.setText("    ");

        lblSubTitle4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle4.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle4.setText("2.  Adding a student record is simple. All validation including duplication, mandatory fields and values are checked.");

        lblSubTitle5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle5.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle5.setText("3.  For deletion of a student record, teacher can search the student by \"Roll No\" OR \"(First Name & Last Name)\".");

        lblSubTitle6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle6.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle6.setText("     When record found, teacher can proceed with COMMIT for removing the student from the System");

        lblSubTitle7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle7.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle7.setText("4.  For modifying a student record, teacher can do similar search and update any fields, except for ROLL NO");

        lblSubTitle8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle8.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle8.setText("5.  To view all the students in the system, teacher can click GOTO STATISTICS PAGE and view all kind of reports");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanelStudMaintenance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblStudCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStudCount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLine1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(btnGotoStatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btnGotoMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(btnQuitProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSubTitle4, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle5, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle6, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle7, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle8, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addComponent(lblMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(lblSubTitle1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(lblBadRespMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(lblGoodRespMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 849, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(lblSubTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSubTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle7)
                .addGap(11, 11, 11)
                .addComponent(lblSubTitle8)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudCountLabel)
                    .addComponent(lblStudCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelStudMaintenance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblGoodRespMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblBadRespMsg)
                .addGap(18, 18, 18)
                .addComponent(lblLine1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGotoStatistics)
                    .addComponent(btnGotoMainMenu)
                    .addComponent(btnQuitProgram))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Event would be triggered, when user clicks the GOTO STATISTICS PAGE Button
    private void btnGotoStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGotoStatisticsActionPerformed
        
        //if valid input file found, allows the user to click Statistics button, which will take the user to a new form StatsForm
        if (InputFile_Validity_Flag == true)
        {
            frmStats StatsForm = new frmStats(Stud_data);
            StatsForm.setVisible(true);
        }
    }//GEN-LAST:event_btnGotoStatisticsActionPerformed
    
    //Event would be triggered, when user clicks the GOTO MAIN MENU Button
    private void btnGotoMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGotoMainMenuActionPerformed
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
    }//GEN-LAST:event_btnGotoMainMenuActionPerformed
    
    //Event would be triggered, when user clicks ADD button
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        if (InputFile_Validity_Flag == true)
        {
            //Setting the User Command value to 'A'
            User_Command = 'A';

            //Calls ProgInit to initialize all text/label/button fields
            ProgInit();

            //Calls LabelTextVisible to make only selected text/label/button fields visible
            LabelTextVisible();
        }
    }//GEN-LAST:event_btnAddActionPerformed
    
    //Event would be triggered, when user clicks MODIFY button
    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed

        if (InputFile_Validity_Flag == true)
        {
            //Setting the User Command value to 'M'
            User_Command = 'M';

            //Calls ProgInit to initialize all text/label/button fields
            ProgInit();

            //Calls LabelTextVisible to make only selected text/label/button fields visible
            LabelTextVisible();
        }
    }//GEN-LAST:event_btnModifyActionPerformed
    
    //Event would be triggered, when user clicks DELETE button
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if (InputFile_Validity_Flag == true)
        {
            //Setting the User Command value to 'D'
            User_Command = 'D';

            //Calls ProgInit to initialize all text/label/button fields
            ProgInit();

            //Calls LabelTextVisible to make only selected text/label/button fields visible
            LabelTextVisible();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
 
    //Event would be triggered, when user clicks COMMIT button
    private void btnCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommitActionPerformed
        
        //Initializing the flag values and Message labels
        Commit_flag = false;
        Name_Exists_flag = false;
        lblErrStudLastName.setText("");
        lblErrStudFirstName.setText("");
        lblGoodRespMsg.setText("");
        lblBadRespMsg.setText("");
        lblGoodRespMsg.setVisible(true);
        lblBadRespMsg.setVisible(true);
        lblOR1.setVisible(false);
        lblOR2.setVisible(false);
        
        //If all input text fields are valid, then proceed with COMMIT actions
        if (StudRollNo_flag == true &&
            StudLastName_flag == true &&
            StudFirstName_flag == true &&
            StudSubj1_flag == true &&
            StudSubj2_flag == true &&
            StudSubj3_flag == true &&
            StudSubj4_flag == true )
        {
            //If Roll No is empty, move 0 to Roll No. Else move the text value to Roll No
            if ("".equals(txtStudRollNo.getText()))
            {
                StudRollNo = 0;
            }
            else
            {
                StudRollNo = Integer.parseInt(txtStudRollNo.getText());
            }

            //If Subject 1 marks is empty, move 0 to Subj1Marks. Else move the text value to Subj1Marks
            if ("".equals(txtStudSubj1.getText()))
            {
                Subj1Marks = 0;
            }
            else
            {
                Subj1Marks = Integer.parseInt(txtStudSubj1.getText());
            }

            //If Subject 2 marks is empty, move 0 to Subj2Marks. Else move the text value to Subj2Marks
            if ("".equals(txtStudSubj2.getText()))
            {
                Subj2Marks = 0;
            }
            else
            {
                Subj2Marks = Integer.parseInt(txtStudSubj2.getText());
            }

            //If Subject 3 marks is empty, move 0 to Subj3Marks. Else move the text value to Subj3Marks
            if ("".equals(txtStudSubj3.getText()))
            {
                Subj3Marks = 0;
            }
            else
            {
                Subj3Marks = Integer.parseInt(txtStudSubj3.getText());
            }

            //If Subject 4 marks is empty, move 0 to Subj4Marks. Else move the text value to Subj4Marks
            if ("".equals(txtStudSubj4.getText()))
            {
                Subj4Marks = 0;
            }
            else
            {
                Subj4Marks = Integer.parseInt(txtStudSubj4.getText());
            }
            
            //Execute, when user performs ADD function
            if (User_Command == 'A')
            {   
                //Checks for Empty Student First Name and sets the error messages and First Name Flag to false
                if ("".equals (txtStudFirstName.getText()))
                {
                    Commit_flag = false;
                    StudFirstName_flag = false;
                    txtStudFirstName.setBackground(Color.red);
                    lblErrStudFirstName.setText("Bad Input. Student First Name cannot be Blank");
                    lblBadRespMsg.setText("Student First Name missing. Cannot proceed with COMMIT.");
                }
                //Checks for Empty Student Last Name and sets the error messages and Last Name Flag to false
                else if ("".equals (txtStudLastName.getText()))
                {
                    Commit_flag = false;
                    StudLastName_flag = false;
                    txtStudLastName.setBackground(Color.red);
                    lblErrStudLastName.setText("Bad Input. Student Last Name cannot be Blank");
                    lblBadRespMsg.setText("Student Last Name missing. Cannot proceed with COMMIT.");
                }
                //performs further validation, if both First Name and Last Name are not empty
                else
                {
                    //Concatenate the Student First Name and Last Name and store in Student_Name field
                    Student_Name = txtStudFirstName.getText() + " " + txtStudLastName.getText();

                    //calls sub-routine CheckName to validate whether the name already exists, by passing StudName array and Student Name String
                    Name_Exists_flag = CheckName(Stud_data.Arr_StudNames, Student_Name);

                    //If the Student name already exists, set the Commit flag to FALSE. Else, set Commit flag to TRUE
                    if (Name_Exists_flag == true)
                    {
                        Commit_flag = false;
                        lblBadRespMsg.setText("Student Record already exists in the System. Use MODIFY to update the record.");
                    }
                    else
                    {
                        Commit_flag = true;
                    }
                }
                
                //Proceed with creating a new entry into all Student Arrays, when Commit Flag is TRUE
                if (Commit_flag == true)
                {
                    //Find next array index to store the student record by passing StudRollNo array
                    StudRollNo_Array_NextStorage = NextArrayStorage(Stud_data.Arr_StudRollNo); 

                    //Setting the values for Student Roll No, Names, Subj1 Marks, Subj2 Marks, Subj3 Marks and Subj4 Mark arrays and saving them
                    Stud_data.Arr_StudRollNo[StudRollNo_Array_NextStorage] = NextRollNo;
                    Stud_data.Arr_StudLastNames[StudRollNo_Array_NextStorage] = txtStudLastName.getText();
                    Stud_data.Arr_StudFirstNames[StudRollNo_Array_NextStorage] = txtStudFirstName.getText();
                    Stud_data.Arr_StudNames[StudRollNo_Array_NextStorage] = Student_Name;
                    Stud_data.Arr_Subj1Marks[StudRollNo_Array_NextStorage] = Subj1Marks;
                    Stud_data.Arr_Subj2Marks[StudRollNo_Array_NextStorage] = Subj2Marks;
                    Stud_data.Arr_Subj3Marks[StudRollNo_Array_NextStorage] = Subj3Marks;
                    Stud_data.Arr_Subj4Marks[StudRollNo_Array_NextStorage] = Subj4Marks;
                    
                    //Makes the Student roll number visible and displays the value
                    lblStudRollNo.setVisible(true);
                    txtStudRollNo.setVisible(true);
                    txtStudRollNo.setText(String.valueOf(Stud_data.Arr_StudRollNo[StudRollNo_Array_NextStorage]));
                    
                    lblGoodRespMsg.setText("Student Record for '" + Stud_data.Arr_StudNames[StudRollNo_Array_NextStorage] +"' successfully added to the System. Roll Number is '" + Stud_data.Arr_StudRollNo[StudRollNo_Array_NextStorage] + "'.");
                    Success_Msg = "Student Record for '" + Stud_data.Arr_StudNames[StudRollNo_Array_NextStorage] +"' successfully added to the System. Roll Number is '" + Stud_data.Arr_StudRollNo[StudRollNo_Array_NextStorage] + "'.";
                }
            }
            //Execute, when user performs MODIFY function
            else if (User_Command == 'M')
            {
                //Concatenate the Student First Name and Last Name and store in Student_Name field
                Student_Name = txtStudFirstName.getText() + " " + txtStudLastName.getText();
                
                //Performs Name check for existence only if the name has been modified after Student record search 
                if (!(Student_Name.equals (Stud_data.Arr_StudNames[SearchFindIndex])))
                {
                    //calls sub-routine CheckName to validate whether the name already exists, by passing StudName array and Student Name String
                    Name_Exists_flag = CheckName(Stud_data.Arr_StudNames, Student_Name);
                    
                    //If the updated Student name already exists, set the Commit flag to FALSE. Else, set Commit flag to TRUE
                    if (Name_Exists_flag == true)
                    {
                        Commit_flag = false;
                        lblBadRespMsg.setText("New Student Name already exists in the System. Try MODIFY again.");
                    }
                    else
                    {
                        Commit_flag = true;
                    }
                }
                else
                {   
                    Commit_flag = true;
                }
                
                //Proceed with updating the current entry in all Student Arrays, when Commit Flag is TRUE
                if (Commit_flag == true)
                {
                    //Setting the values for Student Roll No, Names, Subj1 Marks, Subj2 Marks, Subj3 Marks and Subj4 Mark arrays and saving them
                    Stud_data.Arr_StudRollNo[SearchFindIndex] = StudRollNo;
                    Stud_data.Arr_StudLastNames[SearchFindIndex] = txtStudLastName.getText();
                    Stud_data.Arr_StudFirstNames[SearchFindIndex] = txtStudFirstName.getText();
                    Stud_data.Arr_StudNames[StudRollNo_Array_NextStorage] = Student_Name;
                    Stud_data.Arr_Subj1Marks[SearchFindIndex] = Subj1Marks;
                    Stud_data.Arr_Subj2Marks[SearchFindIndex] = Subj2Marks;
                    Stud_data.Arr_Subj3Marks[SearchFindIndex] = Subj3Marks;
                    Stud_data.Arr_Subj4Marks[SearchFindIndex] = Subj4Marks;

                    lblGoodRespMsg.setText("Student Record for '" + Stud_data.Arr_StudNames[StudRollNo_Array_NextStorage] +"' successfully modifed in the System.");
                    Success_Msg = "Student Record for '" + Stud_data.Arr_StudNames[StudRollNo_Array_NextStorage] +"' successfully modifed in the System.";
                }
            }
            //Execute, when user performs DELETE function
            else
            {
                //using for loop, to move all the values from next array index to the previous index, until we hit 0 in the Student array index
                for (int i = SearchFindIndex; i < Stud_data.Arr_StudRollNo.length; i = i + 1)
                {
                    if (Stud_data.Arr_StudRollNo[i+1] == 0)
                    {
                        //Erasing all the values of the Student record and storing in all arrays
                        Stud_data.Arr_StudRollNo[i] = 0;
                        Stud_data.Arr_StudLastNames[i] = "";
                        Stud_data.Arr_StudFirstNames[i] = "";
                        Stud_data.Arr_Subj1Marks[i] = 0;
                        Stud_data.Arr_Subj2Marks[i] = 0;
                        Stud_data.Arr_Subj3Marks[i] = 0;
                        Stud_data.Arr_Subj4Marks[i] = 0;
                        break;
                    }
                    else
                    {
                        Stud_data.Arr_StudRollNo[i] = Stud_data.Arr_StudRollNo[i+1];
                        Stud_data.Arr_StudLastNames[i] = Stud_data.Arr_StudLastNames[i+1];
                        Stud_data.Arr_StudFirstNames[i] = Stud_data.Arr_StudFirstNames[i+1];
                        Stud_data.Arr_Subj1Marks[i] = Stud_data.Arr_Subj1Marks[i+1];
                        Stud_data.Arr_Subj2Marks[i] = Stud_data.Arr_Subj2Marks[i+1];
                        Stud_data.Arr_Subj3Marks[i] = Stud_data.Arr_Subj3Marks[i+1];
                        Stud_data.Arr_Subj4Marks[i] = Stud_data.Arr_Subj4Marks[i+1];
                    }
                }
                Commit_flag = true;
                lblGoodRespMsg.setText("Student Record successfully deleted");
                Success_Msg = "Student Record successfully deleted";
            }
        }
        //If any input text fields have errors, dont proceed with COMMIT actions and display error message to fix the fields before committing
        else
        {
            lblBadRespMsg.setText("Error input. Fix before proceeding with COMMIT.");
            Commit_flag = false;
        }
        
        //If final COMMIT_flag is True, calls ProgInit to initialize all text, labels and shows the Menu option again
        if (Commit_flag == true)
        {
            ProgInit();
            lblGoodRespMsg.setVisible(true);
            lblGoodRespMsg.setText(Success_Msg);
        }
        Commit_flag = false;
    }//GEN-LAST:event_btnCommitActionPerformed
    
    //Event would be triggered, when user clicks SEARCH button
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        //Initializing the flag values and Message labels
        Search_flag = false;
        lblErrStudRollNo.setText("");
        lblErrStudFirstName.setText("");
        lblGoodRespMsg.setText("");
        lblBadRespMsg.setText("");
        lblGoodRespMsg.setVisible(true);
        lblBadRespMsg.setVisible(true);
        lblOR1.setVisible(false);
        lblOR2.setVisible(false);
        
        //Checks for Empty Student First Name, while Student Last Name is not empty and displays Error message
        if (("".equals (txtStudFirstName.getText())) && (!("".equals (txtStudLastName.getText()))))
        {
            StudFirstName_flag = false;
            txtStudFirstName.setBackground(Color.red);
            lblErrStudFirstName.setText("Bad Input. Student First Name cannot be Blank");
        }
        
        //Checks for Empty Student Last Name, while Student First Name is not empty and displays Error message
        if (!("".equals (txtStudFirstName.getText())) && ("".equals (txtStudLastName.getText())))
        {
            StudLastName_flag = false;
            txtStudLastName.setBackground(Color.red);
            lblErrStudLastName.setText("Bad Input. Student Last Name cannot be Blank");
        }
        
        //Checks for Empty Student Last Name and Student First Name, with Roll Number populated
        if (("".equals (txtStudFirstName.getText())) && ("".equals (txtStudLastName.getText())) && !(txtStudRollNo.getText().isEmpty()))
        {
            StudLastName_flag = true;
            StudFirstName_flag = true;
        }
        
        //If all input text fields are valid, then proceed with SEARCH action
        if (StudRollNo_flag == true &&
            StudLastName_flag == true &&
            StudFirstName_flag == true)
        {   
            //Checks Name & Roll No combination, if both inputs provided
            if ((!txtStudFirstName.getText().isEmpty()) && (!txtStudLastName.getText().isEmpty()) && (!txtStudRollNo.getText().isEmpty()))
            {
                //Concatenate the Student First Name and Last Name and store in Student_Name field
                Student_Name = txtStudFirstName.getText() + " " + txtStudLastName.getText();
                
                //calls sub-routine CheckName to validate whether the name already exists, by passing StudName array and Student Name String
                Name_Exists_flag = CheckName(Stud_data.Arr_StudNames, Student_Name);
                
                //Compares Student Roll No, if the Student Name already exists. If doesnt exists, displays error message - No Student record found
                if (Name_Exists_flag == true)
                {
                    if (Integer.parseInt(txtStudRollNo.getText()) == Stud_data.Arr_StudRollNo[SearchFindIndex])
                    {
                        Search_flag = true;
                    }
                    else
                    {
                        Search_flag = false;
                        lblBadRespMsg.setText("No Student record found, with the inputs provided. Try again or with 1 field");
                    }
                }
                else
                {
                    Search_flag = false;
                    lblBadRespMsg.setText("No Student record found, with the inputs provided. Try again or with 1 field");
                }
            }
            //Checks Name existance by calling CheckName routine
            else if ((!txtStudFirstName.getText().isEmpty()) && (!txtStudLastName.getText().isEmpty()))
            {
                //Concatenate the Student First Name and Last Name and store in Student_Name field
                Student_Name = txtStudFirstName.getText() + " " + txtStudLastName.getText();
                
                //calls sub-routine CheckName to validate whether the name already exists, by passing StudName array and Student Name String
                Name_Exists_flag = CheckName(Stud_data.Arr_StudNames, Student_Name);
                
                //If the Student Name does not exists, displays error message - No Student record found
                if (Name_Exists_flag == true)
                {
                    Search_flag = true;
                }
                else
                {
                    Search_flag = false;
                    lblBadRespMsg.setText("No Student record found, with the name provided. Try again");
                }
            }
            //Checks Roll No existance by calling CheckRoll routine
            else if (!txtStudRollNo.getText().isEmpty())
            {
                //calls sub-routine CheckRoll to validate whether the Roll No already exists, by passing StudRollNo array
                Roll_Exists_flag = CheckRoll(Stud_data.Arr_StudRollNo, txtStudRollNo.getText());
                
                //If the Student Roll No does not exists, displays error message - No Student record found
                if (Roll_Exists_flag == true)
                {
                    Search_flag = true;
                }
                else
                {
                    Search_flag = false;
                    lblBadRespMsg.setText("No Student record found, with the Roll No provided. Try again");
                }
            }
            else
            {
                Search_flag = false;
                lblBadRespMsg.setText("No inputs provided for SEARCH. Try again.");
            }
            
            //If Student record found, display all the Student Marks in the text fields
            if (Search_flag == true)
            {
                if (User_Command == 'M')
                {
                    lblGoodRespMsg.setText("Student Record found. Proceed with Modification");
                }
                else
                {
                    lblGoodRespMsg.setText("Student Record found. Proceed with Deletion");
                }
                //calls sub-routine DispStudRecord to display all the Array field values into the Text fields
                DispStudRecord();
                
                Perform_Search = false;
                
                // SetVisible to False for the label error fields
                lblErrStudSubj1.setVisible(true);
                lblErrStudSubj2.setVisible(true);
                lblErrStudSubj3.setVisible(true);
                lblErrStudSubj4.setVisible(true); 
                
                // Setting Student Roll No input text field to NON-EDITABLE
                txtStudRollNo.setEditable(false);

                // Setting the background color for Student Roll No
                txtStudRollNo.setBackground(Color.GRAY);

                // SetVisible to False for the buttons Search, Commit and Cancel
                btnSearch.setVisible(false);
                btnCommit.setVisible(true);
                btnCancel.setVisible(true);   
            }
        }
        else
        {
            lblBadRespMsg.setText("Error input. Fix before proceeding with SEARCH.");
            Search_flag = false;
        }
        
        if (Search_flag == false)
        {
            lblOR1.setVisible(true);
            lblOR2.setVisible(true);
        }
    }//GEN-LAST:event_btnSearchActionPerformed
        
    //Event when triggered after clicking CANCEL button, to call ProgInit routine to initialize all texts, labels, buttons and error message fields.
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
    }//GEN-LAST:event_btnCancelActionPerformed
    
    //Event would be triggered, when user clicks X button on the form, to close the program
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        //calls sub-routine WriteOutputFile to update the input file, using the modified values in the array fields
        if (InputFile_Validity_Flag == true)
        {
            WriteOutputFile(tempFile);
        }
    }//GEN-LAST:event_formWindowClosing
    
    //Event would be triggered, when user clicks QUIT PROGRAM button
    private void btnQuitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitProgramActionPerformed
        
        //calls sub-routine WriteOutputFile to update the input file, using the modified values in the array fields
        if (InputFile_Validity_Flag == true)
        {
            WriteOutputFile(tempFile);
        }
        System.exit(0);
    }//GEN-LAST:event_btnQuitProgramActionPerformed
    
    //Event when triggered after inputing the text field, to validate the input value for Student Roll Number and ensure the value is Integer and > 0
    private void txtStudRollNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudRollNoKeyReleased
        
        //Initialize Flag and Error Message before validating the Student Roll No
        StudRollNo_flag = true;
        Validate_Integer = 0;
        lblBadRespMsg.setText("");
        
        //Performs validation only if the values are entered in Student Roll No text field
        if (!"".equals(txtStudRollNo.getText()))
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(txtStudRollNo.getText());
                StudRollNo_flag = true;
            }

            catch (NumberFormatException e)
            {
                lblErrStudRollNo.setText("Bad Input. Expecting Integer Values");
                StudRollNo_flag = false;
                //txtStudRollNo.setText("");
            }

            //Checks for Negative values or Zero and displays error message
            if (StudRollNo_flag == true)
            {
                if (Validate_Integer <= 0)
                {
                    lblErrStudRollNo.setText("Bad Input. Student Roll No cannot be <= 0");
                    StudRollNo_flag = false;
                }     
            }
        }
        
        //Sets the Background color to Red, if error input provided.
        if (StudRollNo_flag == false)
        {
            txtStudRollNo.setBackground(Color.red);
        }
        else
        {
            txtStudRollNo.setBackground(Color.white);  
            lblErrStudRollNo.setText("");
        }
        
        //To clear the error fields on Last Name and First Name if empty and while doing perform Search
        if ((Perform_Search == true) && (StudRollNo_flag == true))
        {
            if (("".equals (txtStudFirstName.getText())) && ("".equals (txtStudLastName.getText())))
            {
                StudFirstName_flag = true;
                StudLastName_flag = true;
                txtStudFirstName.setBackground(Color.white);
                txtStudLastName.setBackground(Color.white);
                lblErrStudFirstName.setText("");
                lblErrStudLastName.setText("");
            }
        }
    }//GEN-LAST:event_txtStudRollNoKeyReleased
    
    //Event when triggered after inputing the text field, to validate the input value for Subject 1 marks and ensure the value is Integer, >=0 and <= 100
    private void txtStudSubj1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudSubj1KeyReleased
        
        //Initialize Flag and Error Message before validating the Subject 1
        StudSubj1_flag = true;
        Validate_Integer = 0;
        lblBadRespMsg.setText("");

        //Performs validation only if the values are entered in Subject 1 text field
        if (!txtStudSubj1.getText().isEmpty())
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(txtStudSubj1.getText());
                StudSubj1_flag = true;
            }

            catch (NumberFormatException e)
            {
                lblErrStudSubj1.setText("Bad Input. Expecting Integer Values");
                StudSubj1_flag = false;
            }

            //Checks for Negative values and Subject 1 marks > 100 and displays error message
            if (StudSubj1_flag == true)
            {
                if ((Validate_Integer < 0) || (Validate_Integer > 100))
                {
                    lblErrStudSubj1.setText("Bad Input. Subj-1 marks should be >= 0 and <= 100");
                    StudSubj1_flag = false;
                }     
            }
        }
        
        //Sets the Background color to Red, if error input provided.
        if (StudSubj1_flag == false)
        {
            txtStudSubj1.setBackground(Color.red);
        }
        else
        {
            txtStudSubj1.setBackground(Color.white);    
            lblErrStudSubj1.setText("");
        }
        
    }//GEN-LAST:event_txtStudSubj1KeyReleased
    
    //Event when triggered after inputing the text field, to validate the input value for Subject 2 marks and ensure the value is Integer, >=0 and <= 100
    private void txtStudSubj2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudSubj2KeyReleased
        
        //Initialize Flag and Error Message before validating the Subject 2
        StudSubj2_flag = true;
        Validate_Integer = 0;
        lblBadRespMsg.setText("");

        //Performs validation only if the values are entered in Subject 2 text field
        if (!txtStudSubj2.getText().isEmpty())
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(txtStudSubj2.getText());
                StudSubj2_flag = true;
            }

            catch (NumberFormatException e)
            {
                lblErrStudSubj2.setText("Bad Input. Expecting Integer Values");
                StudSubj2_flag = false;
            }

            //Checks for Negative values and Subject 2 marks > 100 and displays error message
            if (StudSubj2_flag == true)
            {
                if ((Validate_Integer < 0) || (Validate_Integer > 100))
                {
                    lblErrStudSubj2.setText("Bad Input. Subj-2 marks should be >= 0 and <= 100");
                    StudSubj2_flag = false;
                }     
            }
        }
        
        //Sets the Background color to Red, if error input provided.
        if (StudSubj2_flag == false)
        {
            txtStudSubj2.setBackground(Color.red);
        }
        else
        {
            txtStudSubj2.setBackground(Color.white);
            lblErrStudSubj2.setText("");
        }
        
    }//GEN-LAST:event_txtStudSubj2KeyReleased
    
    //Event when triggered after inputing the text field, to validate the input value for Subject 3 marks and ensure the value is Integer, >=0 and <= 100
    private void txtStudSubj3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudSubj3KeyReleased
        
        //Initialize Flag and Error Message before validating the Subject 3
        StudSubj3_flag = true;
        Validate_Integer = 0;
        lblBadRespMsg.setText("");

        //Performs validation only if the values are entered in Subject 3 text field
        if (!txtStudSubj3.getText().isEmpty())
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(txtStudSubj3.getText());
                StudSubj3_flag = true;
            }

            catch (NumberFormatException e)
            {
                lblErrStudSubj3.setText("Bad Input. Expecting Integer Values");
                StudSubj3_flag = false;
            }

            //Checks for Negative values and Subject 3 marks > 100 and displays error message
            if (StudSubj3_flag == true)
            {
                if ((Validate_Integer < 0) || (Validate_Integer > 100))
                {
                    lblErrStudSubj3.setText("Bad Input. Subj-3 marks should be >= 0 and <= 100");
                    StudSubj3_flag = false;
                }     
            }
        }
        
        //Sets the Background color to Red, if error input provided.
        if (StudSubj3_flag == false)
        {
            txtStudSubj3.setBackground(Color.red);
        }
        else
        {
            txtStudSubj3.setBackground(Color.white);  
            lblErrStudSubj3.setText("");
        }
        
    }//GEN-LAST:event_txtStudSubj3KeyReleased
    
    //Event when triggered after inputing the text field, to validate the input value for Subject 4 marks and ensure the value is Integer, >=0 and <= 100
    private void txtStudSubj4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudSubj4KeyReleased
        
        //Initialize Flag and Error Message before validating the Subject 4
        StudSubj4_flag = true;
        Validate_Integer = 0;
        lblBadRespMsg.setText("");

        //Performs validation only if the values are entered in Subject 4 text field
        if (!txtStudSubj4.getText().isEmpty())
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(txtStudSubj4.getText());
                StudSubj4_flag = true;
            }

            catch (NumberFormatException e)
            {
                lblErrStudSubj4.setText("Bad Input. Expecting Integer Values");
                StudSubj4_flag = false;
            }

            //Checks for Negative values and Subject 4 marks > 100 and displays error message
            if (StudSubj4_flag == true)
            {
                if ((Validate_Integer < 0) || (Validate_Integer > 100))
                {
                    lblErrStudSubj4.setText("Bad Input. Subj-4 marks should be >= 0 and <= 100");
                    StudSubj4_flag = false;
                }     
            }
        }
        
        //Sets the Background color to Red, if error input provided.
        if (StudSubj4_flag == false)
        {
            txtStudSubj4.setBackground(Color.red);
        }
        else
        {
            txtStudSubj4.setBackground(Color.white); 
            lblErrStudSubj4.setText("");
        }
        
    }//GEN-LAST:event_txtStudSubj4KeyReleased
    
    //Event when triggered after inputing the text field, to validate the input value for Student Last Name and ensure the value is not empty
    private void txtStudLastNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudLastNameKeyReleased
        
        //Initialize Flag and Error Message before validating the Student Last Name
        StudLastName_flag = true;
        lblBadRespMsg.setText("");
        
        //Checks for empty value in Student Last Name, only when not called during Search
        if ((Perform_Search == false) ||
                (Perform_Search == true && StudRollNo_flag == true && ("".equals(txtStudRollNo.getText()))))
        {
            //Performs validation for empty value in Student Last Name text field
            if (txtStudLastName.getText().trim().isEmpty())
            {
                StudLastName_flag = false;
                lblErrStudLastName.setText("Bad Input. Student Last Name cannot be Blank");
            }
            else
            {
                StudLastName_flag = true;
            }
        }
        //Sets the Background color to Red, if error input provided
        if (StudLastName_flag == false)
        {
            txtStudLastName.setBackground(Color.red);
        }
        else
        {
            txtStudLastName.setBackground(Color.white);  
            lblErrStudLastName.setText("");
            //Added code last minute
            if ((Perform_Search == true) && !("".equals(txtStudRollNo.getText())) && txtStudFirstName.getText().trim().isEmpty())
            {
                txtStudFirstName.setBackground(Color.white);
                lblErrStudFirstName.setText("");
            }
        }
        
    }//GEN-LAST:event_txtStudLastNameKeyReleased
    
    //Event when triggered after inputing the text field, to validate the input value for Student First Name and ensure the value is not empty
    private void txtStudFirstNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudFirstNameKeyReleased
        
        //Initialize Flag and Error Message before validating the Student First Name
        StudFirstName_flag = true;
        lblBadRespMsg.setText("");
        
        //Checks for empty value in Student First Name, only when not called during Search
        if ((Perform_Search == false) ||
                (Perform_Search == true && StudRollNo_flag == true && ("".equals(txtStudRollNo.getText()))))
        {
            //Performs validation for empty value in Student First Name text field
            if (txtStudFirstName.getText().trim().isEmpty())
            {
                StudFirstName_flag = false;
                lblErrStudFirstName.setText("Bad Input. Student First Name cannot be Blank");
            }
            else
            {
                StudFirstName_flag = true;
            }
        }

        //Sets the Background color to Red, if error input provided
        if (StudFirstName_flag == false)
        {
            txtStudFirstName.setBackground(Color.red);
        }
        else
        {
            txtStudFirstName.setBackground(Color.white); 
            lblErrStudFirstName.setText("");
            //Added code last minute
            if ((Perform_Search == true) && !("".equals(txtStudRollNo.getText())) && txtStudLastName.getText().trim().isEmpty())
            {
                txtStudLastName.setBackground(Color.white);
                lblErrStudLastName.setText("");
            }
        }
    }//GEN-LAST:event_txtStudFirstNameKeyReleased
    
    /*
        DispStudRecord

        This method allows the User to pull the values from arrays and displays in the Text fields

        Parameters  : NONE

        Returns     : NONE
    */
    public void DispStudRecord() {                                               
        
        // SetVisible to True for the Subject Labels
        lblStudSubj1.setVisible(true);
        lblStudSubj2.setVisible(true);
        lblStudSubj3.setVisible(true);
        lblStudSubj4.setVisible(true);
        
        // SetVisible to True for the Subject Text fields
        txtStudSubj1.setVisible(true);
        txtStudSubj2.setVisible(true);
        txtStudSubj3.setVisible(true);
        txtStudSubj4.setVisible(true);
        
        //Populating the input text fields, with the identified Student record values from Arrays
        txtStudRollNo.setText(String.valueOf(Stud_data.Arr_StudRollNo[SearchFindIndex]));
        txtStudFirstName.setText(Stud_data.Arr_StudFirstNames[SearchFindIndex]);
        txtStudLastName.setText(Stud_data.Arr_StudLastNames[SearchFindIndex]);
        txtStudSubj1.setText(String.valueOf(Stud_data.Arr_Subj1Marks[SearchFindIndex]));
        txtStudSubj2.setText(String.valueOf(Stud_data.Arr_Subj2Marks[SearchFindIndex]));
        txtStudSubj3.setText(String.valueOf(Stud_data.Arr_Subj3Marks[SearchFindIndex]));
        txtStudSubj4.setText(String.valueOf(Stud_data.Arr_Subj4Marks[SearchFindIndex]));
        
        //Setting the Editable to FALSE for all text fields, while performing Deletion
        if (User_Command == 'D')
        {
            txtStudRollNo.setEditable(false);
            txtStudLastName.setEditable(false);
            txtStudFirstName.setEditable(false);
            txtStudSubj1.setEditable(false);
            txtStudSubj2.setEditable(false);
            txtStudSubj3.setEditable(false);
            txtStudSubj4.setEditable(false);
            txtStudRollNo.setBackground(Color.GRAY);
            txtStudLastName.setBackground(Color.GRAY);
            txtStudFirstName.setBackground(Color.GRAY);
            txtStudSubj1.setBackground(Color.GRAY);
            txtStudSubj2.setBackground(Color.GRAY);
            txtStudSubj3.setBackground(Color.GRAY);
            txtStudSubj4.setBackground(Color.GRAY);
        }
    }
    
    /*
        NextArrayStorage

        This method gets the Student Roll No array, finds the next index value to store the values in the arrays and returns the Next index value

        Parameters  : int []

        Returns     : int
    */
    public int NextArrayStorage(int [] InpIntArray) {                                               
        
        int findNextArrayStorage = 0;
        NextRollNo = 0;
        
        //uses for loop to find next array index to store the student record
        for (int i = 0; i < InpIntArray.length; i = i + 1)
        {
            if (InpIntArray[i] == 0)
            {
                findNextArrayStorage = i;
                if (i == 0)
                {
                    NextRollNo = i + 1;
                }
                else
                {
                    NextRollNo = InpIntArray[i-1] + 1;
                }
                break;
            }
        }
        
        return(findNextArrayStorage);
    } 
    
    /*
        CheckName

        This method allows the User to check whether the input string exists in the Array and outputs the boolean value

        Parameters  : String[], String

        Returns     : boolean
    */
    public boolean CheckName(String[] InpStrArray, String Name) {                                               
        
        boolean FindNameFlag = false;
        
        //using for loop, checks whether the input string already exists in the Array values and set the flag accordingly. Also, if found, stores the index value for storage
        for (int i = 0; i < InpStrArray.length; i = i + 1)
        {
            if (InpStrArray[i] == null)
            {
                break;
            }
            else
            {
                if (Name.toUpperCase().equals (InpStrArray[i].toUpperCase()))
                {
                    FindNameFlag = true;
                    SearchFindIndex = i;
                    break;
                }
            }
        }
        
        return(FindNameFlag);
    } 
    
    /*
        CheckRoll

        This method allows the User to check whether the input integer exists in the Array and outputs the boolean value

        Parameters  : Int[], String

        Returns     : boolean
    */
    public boolean CheckRoll(int[] InpIntArray, String Roll) {                                               
        
        boolean FindRollFlag = false;
        int RollNo = Integer.parseInt(Roll);
        
        //using for loop, checks whether the input Roll No already exists in the Array values and set the flag accordingly. Also, if found, stores the index value for storage
        for (int i = 0; i < InpIntArray.length; i = i + 1)
        {
            if (InpIntArray[i] == 0)
            {
                break;
            }
            else
            {
                if (RollNo == InpIntArray[i])
                {
                    FindRollFlag = true;
                    SearchFindIndex = i;
                    break;
                }
            }
        }
        
        return(FindRollFlag);
    } 
    
    /*
        ProgInit

        This method allows the User to initialize all the Button, Label and Text fields

        Parameters  : NONE

        Returns     : NONE
    */
    public void ProgInit() {                                               
        
        // SetVisible to True for the Buttons Add, Modify and Delete
        btnAdd.setVisible(true);
        btnModify.setVisible(true);
        btnDelete.setVisible(true);
        
        //Setting the Background color for the Buttons Add, Modify and Delete
        btnAdd.setBackground(Color.CYAN);
        btnModify.setBackground(Color.CYAN);
        btnDelete.setBackground(Color.CYAN); 
        
        //Setting the Background color for the Buttons GOTO Statistics, GOTO Main Menu and Quit program
        btnGotoStatistics.setBackground(Color.orange);
        btnGotoMainMenu.setBackground(Color.orange);
        btnQuitProgram.setBackground(Color.orange);
        
        jPanelStudMaintenance.setBackground(Color.lightGray);
        
        // SetVisible to True for Menu Option Labels
        lblMenuOption.setVisible(true);
        lblSubMenu.setVisible(true);
        
        // SetVisible to False for Input Labels and Input Text Fields in Form "frmAddModDel"
        lblStudRollNo.setVisible(false);
        lblOR1.setVisible(false);
        lblOR2.setVisible(false);
        lblStudLastName.setVisible(false);
        lblStudFirstName.setVisible(false);
        lblStudSubj1.setVisible(false);
        lblStudSubj2.setVisible(false);
        lblStudSubj3.setVisible(false);
        lblStudSubj4.setVisible(false);
        
        txtStudRollNo.setVisible(false);
        txtStudLastName.setVisible(false);
        txtStudFirstName.setVisible(false);
        txtStudSubj1.setVisible(false);
        txtStudSubj2.setVisible(false);
        txtStudSubj3.setVisible(false);
        txtStudSubj4.setVisible(false);
        
        lblErrStudRollNo.setVisible(false);
        lblErrStudLastName.setVisible(false);
        lblErrStudFirstName.setVisible(false);
        lblErrStudSubj1.setVisible(false);
        lblErrStudSubj2.setVisible(false);
        lblErrStudSubj3.setVisible(false);
        lblErrStudSubj4.setVisible(false);
        
        // SetVisible to False for the buttons Search, Commit and Cancel
        btnSearch.setVisible(false);
        btnCommit.setVisible(false);
        btnCancel.setVisible(false);
        
        lblOperationProg.setVisible(false);
        lblGoodRespMsg.setVisible(false);
        if (InputFile_Validity_Flag == true)
        {
            lblBadRespMsg.setVisible(false);
        }
        
        // Resetting background color to white for all input text fields
        txtStudRollNo.setBackground(Color.white);
        txtStudLastName.setBackground(Color.white);
        txtStudFirstName.setBackground(Color.white);
        txtStudSubj1.setBackground(Color.white);
        txtStudSubj2.setBackground(Color.white);
        txtStudSubj3.setBackground(Color.white);
        txtStudSubj4.setBackground(Color.white);
        
        // Setting all input text fields to EDITABLE
        txtStudRollNo.setEditable(true);
        txtStudLastName.setEditable(true);
        txtStudFirstName.setEditable(true);
        txtStudSubj1.setEditable(true);
        txtStudSubj2.setEditable(true);
        txtStudSubj3.setEditable(true);
        txtStudSubj4.setEditable(true);
        
        //Initializing all the Input Text Fields and Error Fields
        txtStudRollNo.setText("");
        txtStudLastName.setText("");
        txtStudFirstName.setText("");
        txtStudSubj1.setText("");
        txtStudSubj2.setText("");
        txtStudSubj3.setText("");
        txtStudSubj4.setText("");
        
        lblErrStudRollNo.setText("");
        lblErrStudLastName.setText("");
        lblErrStudFirstName.setText("");
        lblErrStudSubj1.setText("");
        lblErrStudSubj2.setText("");
        lblErrStudSubj3.setText("");
        lblErrStudSubj4.setText("");
        
        lblGoodRespMsg.setText("");
        if (InputFile_Validity_Flag == true)
        {
            lblBadRespMsg.setText("");
        }
        
        //Initializing all the validation flag values for Input Text fields
        StudRollNo_flag = true;
        StudLastName_flag = true;
        StudFirstName_flag = true;
        StudSubj1_flag = true;
        StudSubj2_flag = true;
        StudSubj3_flag = true;
        StudSubj4_flag = true;
        Perform_Search = false;
        
        
        //uses for loop, to determine the Student Count in the system, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                Student_Count = i;
                break;
            }
        }
        lblStudCount.setText(String.valueOf(Student_Count));
    }  
    
    /*
        LabelTextVisible

        This method allows the User to make only certain Label and text fields visible, based on the operation performed

        Parameters  : NONE

        Returns     : NONE
    */
    public void LabelTextVisible() {                                               
        
        //Setting the Menu labels, Add/Modify/Delete button invisible
        lblMenuOption.setVisible(false);
        lblSubMenu.setVisible(false);
        btnAdd.setVisible(false);
        btnModify.setVisible(false);
        btnDelete.setVisible(false); 
            
        //Setting the labels visible/invisible, when user performs "ADD"
        if (User_Command == 'A')
        {
            lblStudRollNo.setVisible(false);
            lblStudLastName.setVisible(true);
            lblStudFirstName.setVisible(true);
            lblStudSubj1.setVisible(true);
            lblStudSubj2.setVisible(true);
            lblStudSubj3.setVisible(true);
            lblStudSubj4.setVisible(true);
            
            txtStudRollNo.setVisible(false);
            txtStudLastName.setVisible(true);
            txtStudFirstName.setVisible(true);
            txtStudSubj1.setVisible(true);
            txtStudSubj2.setVisible(true);
            txtStudSubj3.setVisible(true);
            txtStudSubj4.setVisible(true);
            
            lblErrStudRollNo.setVisible(false);
            lblErrStudLastName.setVisible(true);
            lblErrStudFirstName.setVisible(true);
            lblErrStudSubj1.setVisible(true);
            lblErrStudSubj2.setVisible(true);
            lblErrStudSubj3.setVisible(true);
            lblErrStudSubj4.setVisible(true);  
            
            lblOperationProg.setVisible(true);
            lblOperationProg.setText("ADDITION in Progress");
            
            btnCommit.setBackground(Color.green);
            btnCommit.setVisible(true);
            btnCancel.setBackground(Color.green);
            btnCancel.setVisible(true);
            
            lblGoodRespMsg.setVisible(true);
            lblBadRespMsg.setVisible(true);
        }
        //Setting the labels visible/invisible, when user performs "MODIFY" and "DELETE"
        else
        {
            lblStudRollNo.setVisible(true);
            lblStudFirstName.setVisible(true);
            lblStudLastName.setVisible(true);
            lblOR1.setVisible(true);
            lblOR2.setVisible(true);
            
            txtStudRollNo.setVisible(true);
            txtStudFirstName.setVisible(true);
            txtStudLastName.setVisible(true);
            
            lblErrStudRollNo.setVisible(true);
            lblErrStudFirstName.setVisible(true);
            lblErrStudLastName.setVisible(true);
            
            lblOperationProg.setVisible(true);
            if (User_Command == 'M')
            {
                lblOperationProg.setText("MODIFICATION in Progress");
            }
            else
            {
                lblOperationProg.setText("DELETION in Progress");
            }
            Perform_Search = true;
            
            btnSearch.setBackground(Color.green);
            btnSearch.setVisible(true);
            btnCancel.setBackground(Color.green);
            btnCancel.setVisible(true);
   
            lblGoodRespMsg.setVisible(true);
            lblBadRespMsg.setVisible(true);
        }
    } 
    
    /*
        InputFileRead_to_ParallelArray

        This method allows the User to read all the data from the input file and store the information in the Parallel Arrays defined

        Parameters  : NONE

        Returns     : NONE
    */
    public void InputFileRead_to_ParallelArray() {                                               
        
        //integer variable declared to keep track of linecount, while reading the data from the input file
        int linecount = 0;
        
        InputFile_Validity_Flag = false;
        
        //Uses try and catch while reading each record from the Input file
        try
        {
            Scanner fr = new Scanner(new File(filepath));
            fr.useDelimiter("[,\n]");
            
            //When there is a valid record, saves each of the field (delimited by ",") in the integer format into the parallel arrays
            while (fr.hasNext())
            {
                Stud_data.Arr_StudRollNo [linecount] = Integer.parseInt(fr.next());
                Stud_data.Arr_StudFirstNames [linecount] = fr.next();
                Stud_data.Arr_StudLastNames [linecount] = fr.next();
                Stud_data.Arr_Subj1Marks [linecount] = Integer.parseInt(fr.next());
                Stud_data.Arr_Subj2Marks [linecount] = Integer.parseInt(fr.next());
                Stud_data.Arr_Subj3Marks [linecount] = Integer.parseInt(fr.next());
                Stud_data.Arr_Subj4Marks [linecount] = Integer.parseInt(fr.next());
                fr.next();
                //Populate StudNames array using the FirstName and LastName array values
                Stud_data.Arr_StudNames [linecount] = Stud_data.Arr_StudFirstNames [linecount] + " " + Stud_data.Arr_StudLastNames [linecount];
                linecount = linecount + 1;
            }
            
            InputFile_Validity_Flag = true;
            fr.close();
            
        }
        catch (IOException e)
                {
                    try {
                        //if input file not found, creates the new file, instead of displaying error "File Not found"
                        oldFile.createNewFile();
                        InputFile_Validity_Flag = true;
                    } catch (IOException ex) {
                        Logger.getLogger(frmAddModDel.class.getName()).log(Level.SEVERE, null, ex);
                        InputFile_Validity_Flag = false;
                    }
                }
        catch (NumberFormatException n)
                {
                    lblBadRespMsg.setVisible(true);
                    lblBadRespMsg.setText("Bad Formatted data. Fix the Input data and Try again");
                    InputFile_Validity_Flag = false;
                } 
    } 
    
    /*
        WriteOutputFile

        This method creates the Output file and save all the array information into the Output file

        Parameters  : NONE

        Returns     : NONE
    */
    public void WriteOutputFile(String filename) {                                               
        
        File newFile = new File(filename);
        
        try {
            FileWriter fw = new FileWriter(filename,true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            
            //using for loop, checks whether the input Roll No already exists in the Array values and set the flag accordingly. Also, if found, stores the index value for storage
            for (int i = 0; i < Stud_data.Arr_StudRollNo.length; i = i + 1)
            {
                if (Stud_data.Arr_StudRollNo[i] == 0)
                {
                    break;
                }
                else
                {
                    pw.println(Stud_data.Arr_StudRollNo[i]+","+Stud_data.Arr_StudFirstNames[i]+","+Stud_data.Arr_StudLastNames[i]+","+Stud_data.Arr_Subj1Marks[i]+","+Stud_data.Arr_Subj2Marks[i]+","+Stud_data.Arr_Subj3Marks[i]+","+Stud_data.Arr_Subj4Marks[i]+","+"EOR");
                }
            }
            pw.flush();
            pw.close();
            fw.close();
            oldFile.delete();
            File dump = new File(filepath);
            newFile.renameTo(dump);
            
        } catch (IOException ex) {
            Logger.getLogger(frmAddModDel.class.getName()).log(Level.SEVERE, null, ex);
            lblBadRespMsg.setText("File Error in the output file");
        }  
        
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAddModDel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAddModDel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAddModDel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAddModDel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        classAkashISU Stud_data = new classAkashISU();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAddModDel(Stud_data).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCommit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGotoMainMenu;
    private javax.swing.JButton btnGotoStatistics;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnQuitProgram;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanelStudMaintenance;
    private javax.swing.JLabel lblBadRespMsg;
    private javax.swing.JLabel lblErrStudFirstName;
    private javax.swing.JLabel lblErrStudLastName;
    private javax.swing.JLabel lblErrStudRollNo;
    private javax.swing.JLabel lblErrStudSubj1;
    private javax.swing.JLabel lblErrStudSubj2;
    private javax.swing.JLabel lblErrStudSubj3;
    private javax.swing.JLabel lblErrStudSubj4;
    private javax.swing.JLabel lblGoodRespMsg;
    private javax.swing.JLabel lblLine1;
    private javax.swing.JLabel lblMainTitle;
    private javax.swing.JLabel lblMenuOption;
    private javax.swing.JLabel lblOR1;
    private javax.swing.JLabel lblOR2;
    private javax.swing.JLabel lblOperationProg;
    private javax.swing.JLabel lblStudCount;
    private javax.swing.JLabel lblStudCountLabel;
    private javax.swing.JLabel lblStudFirstName;
    private javax.swing.JLabel lblStudLastName;
    private javax.swing.JLabel lblStudRollNo;
    private javax.swing.JLabel lblStudSubj1;
    private javax.swing.JLabel lblStudSubj2;
    private javax.swing.JLabel lblStudSubj3;
    private javax.swing.JLabel lblStudSubj4;
    private javax.swing.JLabel lblSubMenu;
    private javax.swing.JLabel lblSubTitle1;
    private javax.swing.JLabel lblSubTitle2;
    private javax.swing.JLabel lblSubTitle4;
    private javax.swing.JLabel lblSubTitle5;
    private javax.swing.JLabel lblSubTitle6;
    private javax.swing.JLabel lblSubTitle7;
    private javax.swing.JLabel lblSubTitle8;
    private javax.swing.JLabel lbldummy;
    private javax.swing.JTextField txtStudFirstName;
    private javax.swing.JTextField txtStudLastName;
    private javax.swing.JTextField txtStudRollNo;
    private javax.swing.JTextField txtStudSubj1;
    private javax.swing.JTextField txtStudSubj2;
    private javax.swing.JTextField txtStudSubj3;
    private javax.swing.JTextField txtStudSubj4;
    // End of variables declaration//GEN-END:variables
}
