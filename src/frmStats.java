/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author akash
 */

import java.awt.Color;
import java.awt.Font;
import java.awt.event.*;  
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

public class frmStats extends javax.swing.JFrame {
    
    //integer variable declared to store the Top Number list to be inputted by User
    int UI_TopNumber = 0;
    int Student_Count1 = 0;
    
    //String variables declared to store the FilePath for the input file "StudentMaintenance.txt" and temporary file name "temp.txt"
    String filepath = "StudentMaintenance.txt";
    String tempFile = "temp.txt";
    File oldFile = new File(filepath);
    
    public classAkashISU Stud_data;
    
    public frmStats(classAkashISU Stud_data) {
        initComponents();
        this.Stud_data = Stud_data;
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMainTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelTopList = new javax.swing.JPanel();
        btnSubj1 = new javax.swing.JButton();
        btnSubj2 = new javax.swing.JButton();
        btnSubj3 = new javax.swing.JButton();
        btnTopAllSubj = new javax.swing.JButton();
        btnSubj4 = new javax.swing.JButton();
        lblListofMsg = new javax.swing.JLabel();
        txtTopNo = new javax.swing.JTextField();
        lblmsg1 = new javax.swing.JLabel();
        jPanelListAll = new javax.swing.JPanel();
        btnListFailed = new javax.swing.JButton();
        btnListPassed = new javax.swing.JButton();
        btnListDistinction = new javax.swing.JButton();
        btnListA = new javax.swing.JButton();
        btnListStudents = new javax.swing.JButton();
        lblErrMsg = new javax.swing.JLabel();
        btnQuitProgram = new javax.swing.JButton();
        btnGotoMaintenance = new javax.swing.JButton();
        lblSubTitle1 = new javax.swing.JLabel();
        lblSubTitle2 = new javax.swing.JLabel();
        lblSubTitle4 = new javax.swing.JLabel();
        lblSubTitle5 = new javax.swing.JLabel();
        lblSubTitle6 = new javax.swing.JLabel();
        lblStudCountLabel1 = new javax.swing.JLabel();
        lblStudCount1 = new javax.swing.JLabel();
        lblSubTitle7 = new javax.swing.JLabel();
        lblSubTitle8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblMainTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMainTitle.setForeground(new java.awt.Color(255, 0, 0));
        lblMainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMainTitle.setText("STUDENT MARKS - STATISTICAL REPORTING");

        jTable1.setBackground(new java.awt.Color(204, 204, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll No", "First Name", "Last Name", "Math", "Comp. Science", "Biology", "Chemistry", "Average", "Grade", "Pass/Fail"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanelTopList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        btnSubj1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnSubj1.setForeground(new java.awt.Color(0, 0, 204));
        btnSubj1.setText("in MATHEMATICS");
        btnSubj1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubj1ActionPerformed(evt);
            }
        });

        btnSubj2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnSubj2.setForeground(new java.awt.Color(0, 0, 204));
        btnSubj2.setText("in COMPTER SCIENCE");
        btnSubj2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubj2ActionPerformed(evt);
            }
        });

        btnSubj3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnSubj3.setForeground(new java.awt.Color(0, 0, 204));
        btnSubj3.setText("in BIOLOGY");
        btnSubj3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubj3ActionPerformed(evt);
            }
        });

        btnTopAllSubj.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnTopAllSubj.setForeground(new java.awt.Color(0, 0, 204));
        btnTopAllSubj.setText("OVERALL in CLASS");
        btnTopAllSubj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopAllSubjActionPerformed(evt);
            }
        });

        btnSubj4.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnSubj4.setForeground(new java.awt.Color(0, 0, 204));
        btnSubj4.setText("in CHEMISTRY");
        btnSubj4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubj4ActionPerformed(evt);
            }
        });

        lblListofMsg.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblListofMsg.setForeground(new java.awt.Color(0, 0, 204));
        lblListofMsg.setText("LIST OF TOP  ");

        txtTopNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTopNoKeyReleased(evt);
            }
        });

        lblmsg1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblmsg1.setText("(Default is set to 3)");

        javax.swing.GroupLayout jPanelTopListLayout = new javax.swing.GroupLayout(jPanelTopList);
        jPanelTopList.setLayout(jPanelTopListLayout);
        jPanelTopListLayout.setHorizontalGroup(
            jPanelTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTopListLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanelTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblmsg1)
                    .addGroup(jPanelTopListLayout.createSequentialGroup()
                        .addComponent(lblListofMsg)
                        .addGap(18, 18, 18)
                        .addComponent(txtTopNo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(jPanelTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTopAllSubj)
                    .addComponent(btnSubj4)
                    .addComponent(btnSubj3)
                    .addComponent(btnSubj2)
                    .addComponent(btnSubj1))
                .addGap(25, 25, 25))
        );
        jPanelTopListLayout.setVerticalGroup(
            jPanelTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopListLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnSubj1)
                .addGap(28, 28, 28)
                .addComponent(btnSubj2)
                .addGap(26, 26, 26)
                .addGroup(jPanelTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTopListLayout.createSequentialGroup()
                        .addGroup(jPanelTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTopNo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblListofMsg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblmsg1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTopListLayout.createSequentialGroup()
                        .addComponent(btnSubj3)
                        .addGap(15, 15, 15)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(btnSubj4)
                .addGap(46, 46, 46)
                .addComponent(btnTopAllSubj)
                .addGap(22, 22, 22))
        );

        jPanelListAll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        btnListFailed.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnListFailed.setForeground(new java.awt.Color(0, 0, 204));
        btnListFailed.setText("All FAILED");
        btnListFailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListFailedActionPerformed(evt);
            }
        });

        btnListPassed.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnListPassed.setForeground(new java.awt.Color(0, 0, 204));
        btnListPassed.setText("All PASSED");
        btnListPassed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListPassedActionPerformed(evt);
            }
        });

        btnListDistinction.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnListDistinction.setForeground(new java.awt.Color(0, 0, 204));
        btnListDistinction.setText("All DISTINCTION");
        btnListDistinction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListDistinctionActionPerformed(evt);
            }
        });

        btnListA.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnListA.setForeground(new java.awt.Color(0, 0, 204));
        btnListA.setText("All  above A GRADE");
        btnListA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAActionPerformed(evt);
            }
        });

        btnListStudents.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnListStudents.setForeground(new java.awt.Color(0, 0, 204));
        btnListStudents.setText("All  STUDENTS");
        btnListStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListStudentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelListAllLayout = new javax.swing.GroupLayout(jPanelListAll);
        jPanelListAll.setLayout(jPanelListAllLayout);
        jPanelListAllLayout.setHorizontalGroup(
            jPanelListAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListAllLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(jPanelListAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnListStudents)
                    .addComponent(btnListA)
                    .addComponent(btnListDistinction)
                    .addComponent(btnListPassed)
                    .addComponent(btnListFailed))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanelListAllLayout.setVerticalGroup(
            jPanelListAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListAllLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnListFailed)
                .addGap(31, 31, 31)
                .addComponent(btnListPassed)
                .addGap(29, 29, 29)
                .addComponent(btnListDistinction)
                .addGap(38, 38, 38)
                .addComponent(btnListA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(btnListStudents)
                .addGap(21, 21, 21))
        );

        lblErrMsg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblErrMsg.setForeground(new java.awt.Color(255, 0, 51));
        lblErrMsg.setText("jLabel1");

        btnQuitProgram.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnQuitProgram.setForeground(new java.awt.Color(255, 0, 0));
        btnQuitProgram.setText("QUIT PROGRAM");
        btnQuitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitProgramActionPerformed(evt);
            }
        });

        btnGotoMaintenance.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGotoMaintenance.setForeground(new java.awt.Color(255, 0, 0));
        btnGotoMaintenance.setText("GOTO STUDENT MAINTENANCE");
        btnGotoMaintenance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGotoMaintenanceActionPerformed(evt);
            }
        });

        lblSubTitle1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSubTitle1.setForeground(new java.awt.Color(51, 0, 51));
        lblSubTitle1.setText("Instructions :");

        lblSubTitle2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle2.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle2.setText("1.  This form helps the teacher extract all reports specific to students performance on any subjects or over all");

        lblSubTitle4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle4.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle4.setText("2.  Table data is for viewing only. For any addition/updates/deletion, teacher need to goto Student Maintenance page");

        lblSubTitle5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle5.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle5.setText("3.  For the 1st section of Menu, teacher can specify the list of TOP students, for any specific subjects or overall. Default is set to 3, if no value provided");

        lblSubTitle6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle6.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle6.setText("4   For the 2nd section of Menu, no input required for list of TOP students, as the reports pull all records satisfying the criteria");

        lblStudCountLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblStudCountLabel1.setForeground(new java.awt.Color(102, 0, 102));
        lblStudCountLabel1.setText("Student Count  :");

        lblStudCount1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblStudCount1.setForeground(new java.awt.Color(0, 102, 102));
        lblStudCount1.setText("    ");

        lblSubTitle7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle7.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle7.setText("5   Teacher has the option to go back to Student Maintenance Page or QUIT program.");

        lblSubTitle8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubTitle8.setForeground(new java.awt.Color(51, 51, 51));
        lblSubTitle8.setText("6   Grades calculated based on Average Marks.  For PASS, student should have received more than 50 marks on all subjects.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(btnGotoMaintenance, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btnQuitProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 983, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSubTitle4, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle2)
                                    .addComponent(lblSubTitle6, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle5, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle7, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSubTitle8, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblSubTitle1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblErrMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblStudCountLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblStudCount1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanelTopList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jPanelListAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(lblMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblMainTitle)
                .addGap(31, 31, 31)
                .addComponent(lblSubTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSubTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle6)
                .addGap(5, 5, 5)
                .addComponent(lblSubTitle7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSubTitle8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudCountLabel1)
                    .addComponent(lblStudCount1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelTopList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelListAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(lblErrMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGotoMaintenance)
                    .addComponent(btnQuitProgram))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Event when triggered after User Clicks "All Students" button
    private void btnListStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListStudentsActionPerformed
    
        //integer variable defined to store LastValueIndex
        int LastValIndex=0;
        txtTopNo.setText("");
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
                
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();

        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //Populates the rows in the table, by pulling all the records from all the arrays
        for (int i=0; i<LastValIndex; i++)
        {
            rowData[0] = Stud_data.Arr_StudRollNo[i];
            rowData[1] = Stud_data.Arr_StudFirstNames[i];
            rowData[2] = Stud_data.Arr_StudLastNames[i];
            rowData[3] = Stud_data.Arr_Subj1Marks[i];
            rowData[4] = Stud_data.Arr_Subj2Marks[i];
            rowData[5] = Stud_data.Arr_Subj3Marks[i];
            rowData[6] = Stud_data.Arr_Subj4Marks[i];
            rowData[7] = Stud_data.Arr_StudAveMarks[i];
            rowData[8] = Stud_data.Arr_StudGrades[i];
            rowData[9] = Stud_data.Arr_StudResults[i];

            model.addRow(rowData);
        }
        
        //If no records can be fetched, display the message "NO Records" found
        if (LastValIndex == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS found in the System.");
        }
    }//GEN-LAST:event_btnListStudentsActionPerformed
    
    //Event when triggered after User Clicks "In Mathematics" button
    private void btnSubj1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubj1ActionPerformed
        
        //integer variables defined to store LastValueIndex and other temporary fields for sorting
        int LastValIndex=0;
        int tempint_Storage;
        int temproll_Storage;
        int displaycounter=0;
        int Storeindex=0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();
        
        //Hides the Columns 4, 5 and 6 in the table, as the user is interested in only Subj1 (Mathematics)
        jTable1.getColumnModel().getColumn(4).setMinWidth(0);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(5).setMinWidth(0);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(6).setMinWidth(0);
        jTable1.getColumnModel().getColumn(6).setMaxWidth(0);
        
        //jTable1.getColumnModel().getColumn(3).setHeaderValue("MATH");
        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to copy the Subj1Marks array into the Arr_Sorted_Subj1Marks array
        for (int j=0; j<LastValIndex;j++)
        {
            Stud_data.Arr_Sorted_Subj1Marks[j] = Stud_data.Arr_Subj1Marks[j];
            Stud_data.Arr_Sorted_IndexbyRollNo[j] = Stud_data.Arr_StudRollNo[j];
        }
        
        //performs the sorting using Ascending order for the Arr_Sorted_Subj1Marks array
        for (int k=1; k<LastValIndex;k++)
        {
            for (int m=k; m > 0; m--)
            {
                if (Stud_data.Arr_Sorted_Subj1Marks[m] > Stud_data.Arr_Sorted_Subj1Marks[m-1])
                {
                    tempint_Storage = Stud_data.Arr_Sorted_Subj1Marks[m];
                    Stud_data.Arr_Sorted_Subj1Marks[m] = Stud_data.Arr_Sorted_Subj1Marks[m-1];
                    Stud_data.Arr_Sorted_Subj1Marks[m-1] = tempint_Storage;
                    
                    temproll_Storage = Stud_data.Arr_Sorted_IndexbyRollNo[m];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m] = Stud_data.Arr_Sorted_IndexbyRollNo[m-1];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m-1] = temproll_Storage;
                }
            }
        }
        
        //Based on the input by the user, will display only those many records from the Arr_Sorted_Subj1Marks array and corresponding student information from other arrays
        while (displaycounter < UI_TopNumber)
        {
            for (int z=0; z<LastValIndex; z++)
            {
                if (Stud_data.Arr_Sorted_IndexbyRollNo[displaycounter] == Stud_data.Arr_StudRollNo[z])
                {
                    Storeindex = z;
                    rowData[0] = Stud_data.Arr_StudRollNo[Storeindex];
                    rowData[1] = Stud_data.Arr_StudFirstNames[Storeindex];
                    rowData[2] = Stud_data.Arr_StudLastNames[Storeindex];
                    rowData[3] = Stud_data.Arr_Subj1Marks[Storeindex];
                    rowData[4] = 0;
                    rowData[5] = 0;
                    rowData[6] = 0;
                    rowData[7] = Stud_data.Arr_StudAveMarks[Storeindex];
                    rowData[8] = Stud_data.Arr_StudGrades[Storeindex];
                    rowData[9] = Stud_data.Arr_StudResults[Storeindex];
                
                    model.addRow(rowData);
                    break;
                }
            }
            displaycounter = displaycounter + 1;
        }
        
        //If no records can be fetched, display the message "NO Records" found
        if (LastValIndex == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria.");
        }
    }//GEN-LAST:event_btnSubj1ActionPerformed
    
    //Event when triggered after inputing the text field, to validate the input value for Top List to be displayed
    private void txtTopNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTopNoKeyReleased
        
        //Initialize Flag and Error Message before validating the Student Roll No
        UI_TopNumber = 0;
        int Validate_Integer = 0;
        
        //Performs validation only if the values are entered in Student Roll No text field
        if (!"".equals(txtTopNo.getText()))
        {
            //Uses try and catch to validate the data for INTEGER
            try
            {
                Validate_Integer = Integer.parseInt(txtTopNo.getText());
                if (Validate_Integer <= 0)
                {
                    txtTopNo.setBackground(Color.red);
                    lblErrMsg.setText("Bad Input. Input Number cannot be <= 0");
                }
                else
                {
                    if (Validate_Integer <= 50)
                    {
                        UI_TopNumber = Validate_Integer;
                        txtTopNo.setBackground(Color.white);
                        lblErrMsg.setText("");
                    }
                    else
                    {
                        UI_TopNumber = 50;
                        txtTopNo.setBackground(Color.white);
                        lblErrMsg.setText("");
                    }  
                }
            }

            catch (NumberFormatException e)
            {
                txtTopNo.setBackground(Color.red);
                lblErrMsg.setText("Bad Input. Expecting Integer Values");
                txtTopNo.setText("");
            }
        }
        //If no values inputted in the text field, defaults the TOP List to 3
        else
        {   
            lblErrMsg.setText("");
            txtTopNo.setBackground(Color.white);
            UI_TopNumber = 3;
        }
    }//GEN-LAST:event_txtTopNoKeyReleased
    
    //Event when triggered after User Clicks "In ComputerScience" button
    private void btnSubj2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubj2ActionPerformed
        
       //integer variables defined to store LastValueIndex and other temporary fields for sorting
        int LastValIndex=0;
        int tempint_Storage;
        int temproll_Storage;
        int displaycounter=0;
        int Storeindex=0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();
        
        //Hides the Columns 4, 5 and 6 in the table, as the user is interested in only Subj2 (Computer Science)
        jTable1.getColumnModel().getColumn(3).setMinWidth(0);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(5).setMinWidth(0);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(6).setMinWidth(0);
        jTable1.getColumnModel().getColumn(6).setMaxWidth(0);
        
        //jTable1.getColumnModel().getColumn(3).setHeaderValue("MATH");
        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to copy the Subj2Marks array into the Arr_Sorted_Subj2Marks array
        for (int j=0; j<LastValIndex;j++)
        {
            Stud_data.Arr_Sorted_Subj2Marks[j] = Stud_data.Arr_Subj2Marks[j];
            Stud_data.Arr_Sorted_IndexbyRollNo[j] = Stud_data.Arr_StudRollNo[j];
        }
        
        //performs the sorting using Ascending order for the Arr_Sorted_Subj2Marks array
        for (int k=1; k<LastValIndex;k++)
        {
            for (int m=k; m > 0; m--)
            {
                if (Stud_data.Arr_Sorted_Subj2Marks[m] > Stud_data.Arr_Sorted_Subj2Marks[m-1])
                {
                    tempint_Storage = Stud_data.Arr_Sorted_Subj2Marks[m];
                    Stud_data.Arr_Sorted_Subj2Marks[m] = Stud_data.Arr_Sorted_Subj2Marks[m-1];
                    Stud_data.Arr_Sorted_Subj2Marks[m-1] = tempint_Storage;
                    
                    temproll_Storage = Stud_data.Arr_Sorted_IndexbyRollNo[m];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m] = Stud_data.Arr_Sorted_IndexbyRollNo[m-1];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m-1] = temproll_Storage;
                }
            }
        }
        
        //Based on the input by the user, will display only those many records from the Arr_Sorted_Subj2Marks array and corresponding student information from other arrays
        while (displaycounter < UI_TopNumber)
        {
            for (int z=0; z<LastValIndex; z++)
            {
                if (Stud_data.Arr_Sorted_IndexbyRollNo[displaycounter] == Stud_data.Arr_StudRollNo[z])
                {
                    Storeindex = z;
                    rowData[0] = Stud_data.Arr_StudRollNo[Storeindex];
                    rowData[1] = Stud_data.Arr_StudFirstNames[Storeindex];
                    rowData[2] = Stud_data.Arr_StudLastNames[Storeindex];
                    rowData[3] = 0;
                    rowData[4] = Stud_data.Arr_Subj2Marks[Storeindex];
                    rowData[5] = 0;
                    rowData[6] = 0;
                    rowData[7] = Stud_data.Arr_StudAveMarks[Storeindex];
                    rowData[8] = Stud_data.Arr_StudGrades[Storeindex];
                    rowData[9] = Stud_data.Arr_StudResults[Storeindex];
                
                    model.addRow(rowData);
                    z = LastValIndex;
                }
            }
            displaycounter = displaycounter + 1;
        } 
        
        //If no records can be fetched, display the message "NO Records" found
        if (LastValIndex == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria.");
        }
    }//GEN-LAST:event_btnSubj2ActionPerformed
    
    //Event when triggered after User Clicks "In Biology" button
    private void btnSubj3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubj3ActionPerformed
 
       //integer variables defined to store LastValueIndex and other temporary fields for sorting
        int LastValIndex=0;
        int tempint_Storage;
        int temproll_Storage;
        int displaycounter=0;
        int Storeindex=0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();
        
        //Hides the Columns 4, 5 and 6 in the table, as the user is interested in only Subj3 (Biology)
        jTable1.getColumnModel().getColumn(3).setMinWidth(0);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(4).setMinWidth(0);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(6).setMinWidth(0);
        jTable1.getColumnModel().getColumn(6).setMaxWidth(0);
        
        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to copy the Subj3Marks array into the Arr_Sorted_Subj3Marks array
        for (int j=0; j<LastValIndex;j++)
        {
            Stud_data.Arr_Sorted_Subj3Marks[j] = Stud_data.Arr_Subj3Marks[j];
            Stud_data.Arr_Sorted_IndexbyRollNo[j] = Stud_data.Arr_StudRollNo[j];
        }
        
        //performs the sorting using Ascending order for the Arr_Sorted_Subj3Marks array
        for (int k=1; k<LastValIndex;k++)
        {
            for (int m=k; m > 0; m--)
            {
                if (Stud_data.Arr_Sorted_Subj3Marks[m] > Stud_data.Arr_Sorted_Subj3Marks[m-1])
                {
                    tempint_Storage = Stud_data.Arr_Sorted_Subj3Marks[m];
                    Stud_data.Arr_Sorted_Subj3Marks[m] = Stud_data.Arr_Sorted_Subj3Marks[m-1];
                    Stud_data.Arr_Sorted_Subj3Marks[m-1] = tempint_Storage;
                    
                    temproll_Storage = Stud_data.Arr_Sorted_IndexbyRollNo[m];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m] = Stud_data.Arr_Sorted_IndexbyRollNo[m-1];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m-1] = temproll_Storage;
                }
            }
        }
        
        //Based on the input by the user, will display only those many records from the Arr_Sorted_Subj3Marks array and corresponding student information from other arrays
        while (displaycounter < UI_TopNumber)
        {
            for (int z=0; z<LastValIndex; z++)
            {
                if (Stud_data.Arr_Sorted_IndexbyRollNo[displaycounter] == Stud_data.Arr_StudRollNo[z])
                {
                    Storeindex = z;
                    rowData[0] = Stud_data.Arr_StudRollNo[Storeindex];
                    rowData[1] = Stud_data.Arr_StudFirstNames[Storeindex];
                    rowData[2] = Stud_data.Arr_StudLastNames[Storeindex];
                    rowData[3] = 0;
                    rowData[4] = 0;
                    rowData[5] = Stud_data.Arr_Subj3Marks[Storeindex];
                    rowData[6] = 0;
                    rowData[7] = Stud_data.Arr_StudAveMarks[Storeindex];
                    rowData[8] = Stud_data.Arr_StudGrades[Storeindex];
                    rowData[9] = Stud_data.Arr_StudResults[Storeindex];
                
                    model.addRow(rowData);
                    z = LastValIndex;
                }
            }
            displaycounter = displaycounter + 1;
        }  
        
        //If no records can be fetched, display the message "NO Records" found
        if (LastValIndex == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria.");
        }
    }//GEN-LAST:event_btnSubj3ActionPerformed
    
    //Event when triggered after User Clicks "In Chemistry" button
    private void btnSubj4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubj4ActionPerformed

        //integer variables defined to store LastValueIndex and other temporary fields for sorting
        int LastValIndex=0;
        int tempint_Storage;
        int temproll_Storage;
        int displaycounter=0;
        int Storeindex=0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        // Calling ProgInit procedure, to make input labels and text fields INVISIBLE
        ProgInit();
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();
        
        //Hides the Columns 4, 5 and 6 in the table, as the user is interested in only Subj4 (Chemistry)
        jTable1.getColumnModel().getColumn(3).setMinWidth(0);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(4).setMinWidth(0);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(5).setMinWidth(0);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
        
        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to copy the Subj4Marks array into the Arr_Sorted_Subj4Marks array
        for (int j=0; j<LastValIndex;j++)
        {
            Stud_data.Arr_Sorted_Subj4Marks[j] = Stud_data.Arr_Subj4Marks[j];
            Stud_data.Arr_Sorted_IndexbyRollNo[j] = Stud_data.Arr_StudRollNo[j];
        }
        
        //performs the sorting using Ascending order for the Arr_Sorted_Subj4Marks array
        for (int k=1; k<LastValIndex;k++)
        {
            for (int m=k; m > 0; m--)
            {
                if (Stud_data.Arr_Sorted_Subj4Marks[m] > Stud_data.Arr_Sorted_Subj4Marks[m-1])
                {
                    tempint_Storage = Stud_data.Arr_Sorted_Subj4Marks[m];
                    Stud_data.Arr_Sorted_Subj4Marks[m] = Stud_data.Arr_Sorted_Subj4Marks[m-1];
                    Stud_data.Arr_Sorted_Subj4Marks[m-1] = tempint_Storage;
                    
                    temproll_Storage = Stud_data.Arr_Sorted_IndexbyRollNo[m];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m] = Stud_data.Arr_Sorted_IndexbyRollNo[m-1];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m-1] = temproll_Storage;
                }
            }
        }
        
        //Based on the input by the user, will display only those many records from the Arr_Sorted_Subj4Marks array and corresponding student information from other arrays
        while (displaycounter < UI_TopNumber)
        {
            for (int z=0; z<LastValIndex; z++)
            {
                if (Stud_data.Arr_Sorted_IndexbyRollNo[displaycounter] == Stud_data.Arr_StudRollNo[z])
                {
                    Storeindex = z;
                    rowData[0] = Stud_data.Arr_StudRollNo[Storeindex];
                    rowData[1] = Stud_data.Arr_StudFirstNames[Storeindex];
                    rowData[2] = Stud_data.Arr_StudLastNames[Storeindex];
                    rowData[3] = 0;
                    rowData[4] = 0;
                    rowData[5] = 0;
                    rowData[6] = Stud_data.Arr_Subj4Marks[Storeindex];
                    rowData[7] = Stud_data.Arr_StudAveMarks[Storeindex];
                    rowData[8] = Stud_data.Arr_StudGrades[Storeindex];
                    rowData[9] = Stud_data.Arr_StudResults[Storeindex];
                
                    model.addRow(rowData);
                    z = LastValIndex;
                }
            }
            displaycounter = displaycounter + 1;
        }
        
        //If no records can be fetched, display the message "NO Records" found
        if (LastValIndex == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria.");
        }
    }//GEN-LAST:event_btnSubj4ActionPerformed
    
    //Event when triggered after User Clicks "Overall in CLASS" button
    private void btnTopAllSubjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopAllSubjActionPerformed

        //integer variables defined to store LastValueIndex and other temporary fields for sorting
        int LastValIndex=0;
        double tempint_Storage;
        int temproll_Storage;
        int displaycounter=0;
        int Storeindex=0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();
        
        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to copy the Aver array into the Arr_Sorted_StudAveMarks array
        for (int j=0; j<LastValIndex;j++)
        {
            Stud_data.Arr_Sorted_StudAveMarks[j] = Stud_data.Arr_Double_StudAveMarks[j];
            Stud_data.Arr_Sorted_IndexbyRollNo[j] = Stud_data.Arr_StudRollNo[j];
        }
        
        //performs the sorting using Ascending order for the Arr_Sorted_StudAveMarks array
        for (int k=1; k<LastValIndex;k++)
        {
            for (int m=k; m > 0; m--)
            {
                if (Stud_data.Arr_Sorted_StudAveMarks[m] > Stud_data.Arr_Sorted_StudAveMarks[m-1])
                {
                    tempint_Storage = Stud_data.Arr_Sorted_StudAveMarks[m];
                    Stud_data.Arr_Sorted_StudAveMarks[m] = Stud_data.Arr_Sorted_StudAveMarks[m-1];
                    Stud_data.Arr_Sorted_StudAveMarks[m-1] = tempint_Storage;
                    
                    temproll_Storage = Stud_data.Arr_Sorted_IndexbyRollNo[m];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m] = Stud_data.Arr_Sorted_IndexbyRollNo[m-1];
                    Stud_data.Arr_Sorted_IndexbyRollNo[m-1] = temproll_Storage;
                }
            }
        }
        
        //Based on the input by the user, will display only those many records from the Arr_Sorted_StudAveMarks array and corresponding student information from other arrays
        while (displaycounter < UI_TopNumber)
        {
            for (int z=0; z<LastValIndex; z++)
            {
                if (Stud_data.Arr_Sorted_IndexbyRollNo[displaycounter] == Stud_data.Arr_StudRollNo[z])
                {
                    Storeindex = z;
                    rowData[0] = Stud_data.Arr_StudRollNo[Storeindex];
                    rowData[1] = Stud_data.Arr_StudFirstNames[Storeindex];
                    rowData[2] = Stud_data.Arr_StudLastNames[Storeindex];
                    rowData[3] = Stud_data.Arr_Subj1Marks[Storeindex];
                    rowData[4] = Stud_data.Arr_Subj2Marks[Storeindex];
                    rowData[5] = Stud_data.Arr_Subj3Marks[Storeindex];
                    rowData[6] = Stud_data.Arr_Subj4Marks[Storeindex];
                    rowData[7] = Stud_data.Arr_StudAveMarks[Storeindex];
                    rowData[8] = Stud_data.Arr_StudGrades[Storeindex];
                    rowData[9] = Stud_data.Arr_StudResults[Storeindex];
                
                    model.addRow(rowData);
                    z = LastValIndex;
                }
            }
            displaycounter = displaycounter + 1;
        }
        
        //If no records can be fetched, display the message "NO Records" found
        if (LastValIndex == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria.");
        }
    }//GEN-LAST:event_btnTopAllSubjActionPerformed
    
    //Event when triggered after User Clicks "ALL FAILED" button
    private void btnListFailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListFailedActionPerformed
        
        txtTopNo.setText("");
        //calling DisplayRecordsPASSFAIL routine to display all student records, which has Final Results = FAIL
        DisplaybyPASSFAIL("FAIL");
    }//GEN-LAST:event_btnListFailedActionPerformed
    
    //Event when triggered after User Clicks "ALL PASSED" button
    private void btnListPassedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListPassedActionPerformed

        txtTopNo.setText("");
        //calling DisplayRecordsPASSFAIL routine to display all student records, which has Final Results = PASS
        DisplaybyPASSFAIL("PASS");
    }//GEN-LAST:event_btnListPassedActionPerformed
    
    //Event when triggered after User Clicks "ALL DISTINCTION" button
    private void btnListDistinctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListDistinctionActionPerformed
        
        txtTopNo.setText("");
        //calling DisplaybyGRADE routine to display all student records, which has Grade = A+ (Distinction)
        DisplaybyGRADE("A+","A+","A+");
    }//GEN-LAST:event_btnListDistinctionActionPerformed
    
    //Event when triggered after User Clicks "ALL ABOVE A GRADE" button
    private void btnListAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAActionPerformed
        
        txtTopNo.setText("");
        //calling DisplaybyGRADE routine to display all student records, which has Grade = A and above
        DisplaybyGRADE("A+","A","A");
    }//GEN-LAST:event_btnListAActionPerformed

    private void btnQuitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitProgramActionPerformed

        WriteOutputFile(tempFile);
        System.exit(0);
    }//GEN-LAST:event_btnQuitProgramActionPerformed

    private void btnGotoMaintenanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGotoMaintenanceActionPerformed
        
        WriteOutputFile(tempFile);
        this.dispose();
    }//GEN-LAST:event_btnGotoMaintenanceActionPerformed
    
    /*
        DisplaybyPASSFAIL

        This method displays only the student records that has Student results = FAIL or PASS, depending upon the calling program

        Parameters  : String

        Returns     : NONE
    */
    public void DisplaybyPASSFAIL(String Strval) {                                               
        
        //integer variable defined to store LastValueIndex
        int LastValIndex=0;
        int PassFailCount = 0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();

        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //Populates the rows in the table, by pulling all the records from all the arrays, only if the Student Result = "FAIL" / "PASS" based on called value
        for (int i=0; i<LastValIndex; i++)
        {
            if (Stud_data.Arr_StudResults[i] == Strval )
            {
                rowData[0] = Stud_data.Arr_StudRollNo[i];
                rowData[1] = Stud_data.Arr_StudFirstNames[i];
                rowData[2] = Stud_data.Arr_StudLastNames[i];
                rowData[3] = Stud_data.Arr_Subj1Marks[i];
                rowData[4] = Stud_data.Arr_Subj2Marks[i];
                rowData[5] = Stud_data.Arr_Subj3Marks[i];
                rowData[6] = Stud_data.Arr_Subj4Marks[i];
                rowData[7] = Stud_data.Arr_StudAveMarks[i];
                rowData[8] = Stud_data.Arr_StudGrades[i];
                rowData[9] = Stud_data.Arr_StudResults[i];

                model.addRow(rowData);
                PassFailCount = PassFailCount + 1;
            }
        }
        
        //If no records can be fetched, display the message "NO Records" found
        if (PassFailCount == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria for " + Strval);
        }
    }
    
    /*
        DisplaybyGRADE

        This method displays only the student records that has Student Grades = A or A+, depending upon the calling program

        Parameters  : String, String, String

        Returns     : NONE
    */
    public void DisplaybyGRADE(String Strval1, String Strval2, String Strval3) {                                               
        
        //integer variable defined to store LastValueIndex
        int LastValIndex=0;
        int GradeCount = 0;
        
        //Creating a new DefaultTableModel for jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        Object rowData[] = new Object[10];  //setting a new Object for rowData array
        model.setRowCount(0);   //resetting the rowcount to 0 for the table, to start the table display
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();

        jTable1.getTableHeader().repaint();
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //Populates the rows in the table, by pulling all the records from all the arrays, based on the Grade Value passed from calling procedure
        for (int i=0; i<LastValIndex; i++)
        {
            if ((Stud_data.Arr_StudGrades[i] == Strval1) || (Stud_data.Arr_StudGrades[i] == Strval2) || (Stud_data.Arr_StudGrades[i] == Strval3))
            {
                rowData[0] = Stud_data.Arr_StudRollNo[i];
                rowData[1] = Stud_data.Arr_StudFirstNames[i];
                rowData[2] = Stud_data.Arr_StudLastNames[i];
                rowData[3] = Stud_data.Arr_Subj1Marks[i];
                rowData[4] = Stud_data.Arr_Subj2Marks[i];
                rowData[5] = Stud_data.Arr_Subj3Marks[i];
                rowData[6] = Stud_data.Arr_Subj4Marks[i];
                rowData[7] = Stud_data.Arr_StudAveMarks[i];
                rowData[8] = Stud_data.Arr_StudGrades[i];
                rowData[9] = Stud_data.Arr_StudResults[i];

                model.addRow(rowData);
            }
        }
                
        //If no records can be fetched, display the message "NO Records" found
        if (GradeCount == 0)
        {
            lblErrMsg.setText("NO STUDENT RECORDS to display, satisfying the criteria for Grades  " + Strval1 +"/" + Strval2 + "/" + Strval3);
        }
    }
    
    /*
        CalcAverageMarks

        This method calculates the Average marks for all the students in the class

        Parameters  : NONE

        Returns     : NONE
    */
    public void CalcAverageMarks() {                                               
        
        //integer and double variables defined to store the LastValIndex and Average marks for all students
        int LastValIndex = 0;
        double AverageMarks = 0;
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to sum up all the marks for the students and divide by the number of subjects. Stores the average in the Arr_StudAveMarks array for reporting
        for (int j=0; j<LastValIndex;j++)
        {
            AverageMarks = (float) (Stud_data.Arr_Subj1Marks[j] + Stud_data.Arr_Subj2Marks[j] + Stud_data.Arr_Subj3Marks[j] + Stud_data.Arr_Subj4Marks[j]) / 4;
            Stud_data.Arr_StudAveMarks[j] = String.format("%.2f",AverageMarks);
        }
    }
    
    /*
        CalcGradesAndResults

        This method calculates the Grades and Results for all the students in the class, based on the Student Average Marks

        Parameters  : NONE

        Returns     : NONE
    */
    public void CalcGradesAndResults() {                                               
        
        //integer and double variables defined to store the LastValIndex and Average marks for all students
        int LastValIndex = 0;
        double AverageMarks = 0;
        
        //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                LastValIndex = i;
                break;
            }
        }
        
        //uses for loop, to sum up all the marks for the students and divide by the number of subjects. Stores the average in the Arr_StudAveMarks array for reporting
        for (int j=0; j<LastValIndex;j++)
        {
            try
            {
                AverageMarks = Double.parseDouble(Stud_data.Arr_StudAveMarks[j]);
                
                Stud_data.Arr_Double_StudAveMarks[j] = AverageMarks;
                
                if (AverageMarks >= 90)
                {
                    Stud_data.Arr_StudGrades[j] = "A+";
                }
                else if (AverageMarks >= 80)
                {
                    Stud_data.Arr_StudGrades[j] = "A";
                }
                else if (AverageMarks >= 70)
                {
                    Stud_data.Arr_StudGrades[j] = "B";
                }
                else if (AverageMarks >= 60)
                {
                    Stud_data.Arr_StudGrades[j] = "C";
                }
                else if (AverageMarks >= 50)
                {
                    Stud_data.Arr_StudGrades[j] = "D";
                }
                else
                {
                    Stud_data.Arr_StudGrades[j] = "F";
                }
                
                if ((Stud_data.Arr_Subj1Marks[j]>=50) && (Stud_data.Arr_Subj2Marks[j]>=50) && (Stud_data.Arr_Subj3Marks[j]>=50) && (Stud_data.Arr_Subj4Marks[j]>=50))
                {
                    Stud_data.Arr_StudResults[j] = "PASS";
                }
                else
                {
                    Stud_data.Arr_StudResults[j] = "FAIL";
                }     
            }

            catch (NumberFormatException e)
            {
                txtTopNo.setBackground(Color.red);
                lblErrMsg.setText("Bad conversion. Expecting Double values");
            }
        }
    }
    
    
    /*
        DesignTable

        This method allows the User to create/initialize the table for display

        Parameters  : NONE

        Returns     : NONE
    */
    public void DesignTable() {                                               
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        //Setting the alignment for the table columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        
        JTableHeader TempHeader = jTable1.getTableHeader();
        TempHeader.setFont(new Font("Serif", Font.BOLD, 15));  //Setting Font to BOLD for Row Header
        //TempHeader.setBackground(Color.black);
        
        for (int i=0;i<model.getColumnCount();i++)
        {
            if ((i == 1) || (i == 2) ||(i == 8) || (i == 9))
            {
                jTable1.getColumnModel().getColumn(i).setMaxWidth(95);
                jTable1.getColumnModel().getColumn(i).setCellRenderer(leftRenderer);
            }
            else if (i == 4)
            {
                jTable1.getColumnModel().getColumn(i).setMaxWidth(130);
                jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
            else
            {
                jTable1.getColumnModel().getColumn(i).setMaxWidth(95);
                jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        }
        
        jTable1.getTableHeader().repaint();
    }
    
    /*
        WriteOutputFile

        This method creates the Output file and save all the array information into the Output file

        Parameters  : NONE

        Returns     : NONE
    */
    public void WriteOutputFile(String filename) {                                               
        
        File newFile = new File(filename);
        
        try {
            FileWriter fw = new FileWriter(filename,true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            
            //using for loop, checks whether the input Roll No already exists in the Array values and set the flag accordingly. Also, if found, stores the index value for storage
            for (int i = 0; i < Stud_data.Arr_StudRollNo.length; i = i + 1)
            {
                if (Stud_data.Arr_StudRollNo[i] == 0)
                {
                    break;
                }
                else
                {
                    pw.println(Stud_data.Arr_StudRollNo[i]+","+Stud_data.Arr_StudFirstNames[i]+","+Stud_data.Arr_StudLastNames[i]+","+Stud_data.Arr_Subj1Marks[i]+","+Stud_data.Arr_Subj2Marks[i]+","+Stud_data.Arr_Subj3Marks[i]+","+Stud_data.Arr_Subj4Marks[i]+","+"EOR");
                }
            }
            pw.flush();
            pw.close();
            fw.close();
            oldFile.delete();
            File dump = new File(filepath);
            newFile.renameTo(dump);
            
        } catch (IOException ex) {
            Logger.getLogger(frmAddModDel.class.getName()).log(Level.SEVERE, null, ex);
            lblErrMsg.setText("File Error");
        }  
    } 
    
    /*
        ProgInit

        This method allows the User to initialize all the Button, Label and Text fields

        Parameters  : NONE

        Returns     : NONE
    */
    public void ProgInit() {                                               
        
        //calls subroutine DesignTable, to initialize the Table for display
        DesignTable();
        lblErrMsg.setText("");
        
        //Setting the Background color for all the Buttons in the Menu
        btnSubj1.setBackground(Color.CYAN);
        btnSubj2.setBackground(Color.CYAN);
        btnSubj3.setBackground(Color.CYAN); 
        btnSubj4.setBackground(Color.CYAN);
        btnTopAllSubj.setBackground(Color.CYAN);
        btnListPassed.setBackground(Color.CYAN); 
        btnListFailed.setBackground(Color.CYAN);
        btnListDistinction.setBackground(Color.CYAN);
        btnListA.setBackground(Color.CYAN);
        btnListStudents.setBackground(Color.CYAN);
        
        //Setting the Background color for the Buttons GOTO Statistics, GOTO Main Menu and Quit program
        btnGotoMaintenance.setBackground(Color.orange);
        btnQuitProgram.setBackground(Color.orange);
        
        //Setting the Background color for the Panels
        jPanelTopList.setBackground(Color.lightGray);
        jPanelListAll.setBackground(Color.lightGray);
        
        //uses for loop, to determine the Student Count in the system, by reading all values in the Arr_StudRollNo array
        for (int i=0; i<Stud_data.Arr_StudRollNo.length; i++)
        {
            if (Stud_data.Arr_StudRollNo[i] == 0)
            {
                Student_Count1 = i;
                break;
            }
        }
        lblStudCount1.setText(String.valueOf(Student_Count1));
        
        //If no values inputted in the text field, defaults the TOP List to 3
        if ("".equals(txtTopNo.getText()))
        {
            UI_TopNumber = 3;
        }
        
        //Calculate Average marks for all students
        CalcAverageMarks();
        
        //Calculate Grading and Results for all students
        CalcGradesAndResults();
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmStats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmStats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmStats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmStats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        classAkashISU Stud_data = new classAkashISU();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmStats(Stud_data).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGotoMaintenance;
    private javax.swing.JButton btnListA;
    private javax.swing.JButton btnListDistinction;
    private javax.swing.JButton btnListFailed;
    private javax.swing.JButton btnListPassed;
    private javax.swing.JButton btnListStudents;
    private javax.swing.JButton btnQuitProgram;
    private javax.swing.JButton btnSubj1;
    private javax.swing.JButton btnSubj2;
    private javax.swing.JButton btnSubj3;
    private javax.swing.JButton btnSubj4;
    private javax.swing.JButton btnTopAllSubj;
    private javax.swing.JPanel jPanelListAll;
    private javax.swing.JPanel jPanelTopList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblErrMsg;
    private javax.swing.JLabel lblListofMsg;
    private javax.swing.JLabel lblMainTitle;
    private javax.swing.JLabel lblStudCount1;
    private javax.swing.JLabel lblStudCountLabel1;
    private javax.swing.JLabel lblSubTitle1;
    private javax.swing.JLabel lblSubTitle2;
    private javax.swing.JLabel lblSubTitle4;
    private javax.swing.JLabel lblSubTitle5;
    private javax.swing.JLabel lblSubTitle6;
    private javax.swing.JLabel lblSubTitle7;
    private javax.swing.JLabel lblSubTitle8;
    private javax.swing.JLabel lblmsg1;
    private javax.swing.JTextField txtTopNo;
    // End of variables declaration//GEN-END:variables
}
